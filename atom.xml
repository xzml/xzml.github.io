<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xzml 的个人 Wiki</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-14T15:30:32.004Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>xzml</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据集下载和处理</title>
    <link href="http://yoursite.com/wiki/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E9%9B%86%E4%B8%8B%E8%BD%BD%E5%92%8C%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/wiki/深度学习/数据集下载和处理/</id>
    <published>2019-04-14T13:46:23.000Z</published>
    <updated>2019-04-14T15:30:32.004Z</updated>
    
    <content type="html"><![CDATA[<p>最近在考虑一个问题, 现在 PyTorch 等框架将网络训练整个流程都封装的很好, 比如数据下载, 预处理等等, 我在想如果以后遇到了非标准的数据集那该怎么办, 因此非常有必要自己将数据处理的部分从头动手做一遍, 于是有了下面的代码.</p><h2 id="代码剖析"><a href="#代码剖析" class="headerlink" title="代码剖析"></a>代码剖析</h2><p>完整代码可以看下一节, 这节对其中的细节作分析.</p><h3 id="下载数据并解压"><a href="#下载数据并解压" class="headerlink" title="下载数据并解压"></a>下载数据并解压</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## progress bar of download_url</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_bar_updater</span><span class="params">()</span>:</span></span><br><span class="line">    pbar = tqdm(total=<span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar_update</span><span class="params">(count, block_size, total_size)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> pbar.total <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">and</span> total_size:</span><br><span class="line">            pbar.total = total_size</span><br><span class="line">        <span class="comment">## `count` is incremental,</span></span><br><span class="line">        progress_bytes = count * block_size</span><br><span class="line">        <span class="comment">## `pbar.n`: current state of the bar</span></span><br><span class="line">        pbar.update(progress_bytes - pbar.n)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bar_update</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_url</span><span class="params">(url, root, filename=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(root):</span><br><span class="line">        os.makedirs(root)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> filename:</span><br><span class="line">        filename = os.path.basename(url)</span><br><span class="line">    fpath = os.path.join(root, filename)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(fpath):</span><br><span class="line">         print(<span class="string">'&#123;&#125; exists, no need downloding!'</span>.format(filename))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'Downloading &#123;&#125; to &#123;&#125;'</span>.format(url, fpath))</span><br><span class="line">        urllib.request.urlretrieve(url, fpath,</span><br><span class="line">                               reporthook=gen_bar_updater())</span><br><span class="line">    extract_gzip(fpath, remove_finished=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><p>使用 <code>urllib</code> 中的 <code>urlretrieve</code> 对 <code>url</code> 中的数据进行下载并保存到 <code>fpath</code> 路径, 其中 <code>reporthook</code> 参数接受一个函数对象, 该函数对象需要包含 <code>(count, block_size, total_size)</code> 三个参数, 因此该代码使用 <code>gen_bar_updater</code> 来产生该函数对象, 这样在下载数据时就会有一个进度条.</p><ul><li>在 <code>gen_bar_updater</code> 中, <code>count</code> 在每次更新都会变化, 进度条当前的位置为 <code>pbar.n</code>, 而下一步要变化到 <code>progress_bytes</code>, 因此当前更新中, 进度条需要前进 <code>progress_bytes - pbar.n</code>. 通过这个小知识, 可以了解 <code>tqdm</code> 大致是怎么运作的.</li><li><code>if os.path.exists(fpath)</code> 表示, 如果数据已经下载, 那么可以不用处理, 直接去解压</li><li>编写 <code>extract_gzip()</code> 函数来解压文件, 其中使用 <code>gzip</code> 包来处理 <code>*.gz</code> 文件, 使用 <code>tarfile</code> 包来处理 <code>*.tar.gz</code> 文件, 但是 <code>tarfile</code> 应该也可以处理 <code>*.gz</code> 文件… <code>extract_gzip</code> 这里就不详细介绍了. </li></ul><p>当将数据解压好后, 需要将数据读入内存, 最后将数据保存为大小为 <code>(N, C, H, W)</code> 的 Torch Tensor. 根据数据集是 MNIST 还是 CIFAR 需要分开处理.</p><h2 id="MNIST"><a href="#MNIST" class="headerlink" title="MNIST"></a>MNIST</h2><p>MNIST 的网址是 <a href="http://yann.lecun.com/exdb/mnist/" rel="external nofollow noopener noreferrer" target="_blank">http://yann.lecun.com/exdb/mnist/</a></p><p>根据网站中的介绍, MNIST 的训练数据 <code>train-images-idx3-ubyte</code> 是这样组织的:</p><p><img src="https://i.loli.net/2019/04/14/5cb340d637a93.png" alt="mnist-train-set.png"></p><ul><li>首先, 肯定是以二进制的形式读取 <code>train-images-idx3-ubyte</code> 的:</li></ul><p>其中前 4 位为 magic number, 4~8 为图像数量, 8~12 为行数, 12~16 为列数, 最后剩下的位为图像自身的像素, <code>np.frombuffer</code> 可以直接解析这些二进制位, 注意其中的参数 <code>offset</code>. 此外, 为了得到图像数量等, 还使用了 <code>get_int</code>, 它可以将二进制位转换为整数, 首先将二进制编码为十六进制 <code>hex</code>, 然后转换为 10 进制. (发现好多函数自己真的不熟啊), </p><ul><li>最后通过 <code>torch.from_numpy</code> 将 numpy 数组转换为 Tensor.</li><li>读取 label 同理, 但是需要注意一个问题, <strong>label 的类型是</strong> <strong>`LongTensor</strong>`!!!!</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_int</span><span class="params">(b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> int(codecs.encode(b, <span class="string">'hex'</span>), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_image_file</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(path, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">        <span class="keyword">assert</span> get_int(data[:<span class="number">4</span>]) == <span class="number">2051</span></span><br><span class="line">        num_images = get_int(data[<span class="number">4</span> : <span class="number">8</span>])</span><br><span class="line">        num_rows = get_int(data[<span class="number">8</span> : <span class="number">12</span>])</span><br><span class="line">        num_cols = get_int(data[<span class="number">12</span> : <span class="number">16</span>])</span><br><span class="line">        parsed = np.frombuffer(data, dtype=np.uint8, offset=<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">return</span> torch.from_numpy(parsed).view(num_images, <span class="number">1</span>, num_rows, num_cols)</span><br></pre></td></tr></table></figure><ul><li>最终将 <code>(data, labels)</code> pair 保存到 <code>mnist_train.pth</code> 文件中:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(os.path.join(path, data_file), <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    torch.save(dataset, f)</span><br></pre></td></tr></table></figure><h2 id="CIFAR"><a href="#CIFAR" class="headerlink" title="CIFAR"></a>CIFAR</h2><p>CIFAR 的网址是 <a href="https://www.cs.toronto.edu/~kriz/cifar.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cs.toronto.edu/~kriz/cifar.html</a></p><p>CIFAR 解压后是一个新的目录: <code>cifar-10-batches-py/</code>, 看看官网的介绍:</p><p><img src="https://i.loli.net/2019/04/14/5cb343a911712.png" alt="cifar10-data.png"></p><p>数据文件分为好几个: <code>data_batch_i</code> 以及 <code>test_batch</code>, 官网给了读取数据的代码, 我们可以利用. 读取成功后是一个字典, 虽然上面说 key 有 <code>data</code> 以及 <code>labels</code> 等, 但实际上是 <code>b&#39;data&#39;</code>.</p><p>这里有个问题, 由于数据分成了好几个文件, 我要将它们组合成一个大的数据矩阵, 就需要将每个文件中的数据进行 concatenate, 如何优雅的写出这部分的代码呢? 如果以后有好的思路一定要记下来, 这里使用 <code>list comprehension</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unpickle</span><span class="params">(datafile)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> pickle</span><br><span class="line">    <span class="keyword">with</span> open(datafile, <span class="string">'rb'</span>) <span class="keyword">as</span> fo:</span><br><span class="line">        data_dict = pickle.load(fo, encoding=<span class="string">'bytes'</span>)</span><br><span class="line">    <span class="keyword">return</span> data_dict</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_batch</span><span class="params">(i, path, key=<span class="string">'data'</span>)</span>:</span></span><br><span class="line">    data_dict = unpickle(os.path.join(path, <span class="string">'data_batch_&#123;&#125;'</span>.format(i)))</span><br><span class="line">    <span class="keyword">return</span> data_dict[key]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prepare_dataset</span><span class="params">(...)</span>:</span></span><br><span class="line">    <span class="comment">### ...</span></span><br><span class="line">    data_array = np.concatenate(</span><br><span class="line">                [data_batch(i, cifar_path, <span class="string">b'data'</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>)],</span><br><span class="line">                axis=<span class="number">0</span></span><br><span class="line">            )</span><br><span class="line">    label_array = np.concatenate(</span><br><span class="line">                [data_batch(i, cifar_path, <span class="string">b'labels'</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>)],</span><br><span class="line">                axis=<span class="number">0</span></span><br><span class="line">            )</span><br><span class="line">    torch_data = torch.from_numpy(data_array).view(<span class="number">-1</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">32</span>)</span><br><span class="line">    torch_label= torch.from_numpy(label_array).long()</span><br><span class="line"><span class="comment">### ...</span></span><br></pre></td></tr></table></figure><p>so easy! 最后将结果保存在 <code>cifar_train/test.pth</code> 中.</p><h3 id="辅助代码"><a href="#辅助代码" class="headerlink" title="辅助代码"></a>辅助代码</h3><h4 id="查看图片"><a href="#查看图片" class="headerlink" title="查看图片"></a>查看图片</h4><p>这可以显示一个 array.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_array</span><span class="params">(array, show=False)</span>:</span></span><br><span class="line">    array = np.array(array).transpose((<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>))</span><br><span class="line">    h, w, c = array.shape</span><br><span class="line">    array = array.squeeze()</span><br><span class="line">    <span class="keyword">if</span> c &gt; <span class="number">1</span>: cmap = <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">else</span>: cmap = <span class="string">'gray'</span></span><br><span class="line">    fig, ax = plt.subplots()</span><br><span class="line">    ax.imshow(array, cmap=cmap)</span><br><span class="line">    <span class="keyword">if</span> show:</span><br><span class="line">        plt.show()</span><br></pre></td></tr></table></figure><p>需要注意两个问题:</p><ul><li>对于灰度图, 将数组大小转换为 <code>(h, w, 1)</code> 在扔进 <code>imshow</code> 中是会报错的, 因此需要使用 <code>squeeze()</code> 去掉 <code>1</code> 这个 dimension.</li><li>如果是显示灰度图, <code>cmap</code> 可以设置为 <code>gray</code></li></ul><h4 id="查看一组图片"><a href="#查看一组图片" class="headerlink" title="查看一组图片"></a>查看一组图片</h4><p>显示一组 arrays</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_grid</span><span class="params">(arrays, n_cols=<span class="number">8</span>, cmap=<span class="string">'gray'</span>, show=False)</span>:</span></span><br><span class="line">    arrays = np.array(arrays).transpose((<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>))</span><br><span class="line">    _, h, w, c = arrays.shape</span><br><span class="line">    arrays = arrays.squeeze()</span><br><span class="line">    <span class="keyword">if</span> c &gt; <span class="number">1</span>: cmap = <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">else</span>: cmap = <span class="string">'gray'</span></span><br><span class="line">    num = arrays.shape[<span class="number">0</span>]</span><br><span class="line">    m, n = num // n_cols, n_cols</span><br><span class="line">    fig, axes = plt.subplots(m, n)</span><br><span class="line">    axes = axes.ravel()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        axes[i].set_axis_off()</span><br><span class="line">        axes[i].imshow(arrays[i], cmap=cmap)</span><br><span class="line">    <span class="keyword">if</span> show:</span><br><span class="line">        plt.show()</span><br></pre></td></tr></table></figure><p>同理, 只是这里每行显示 <code>n_cols</code> 张图片.</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>参考了 <a href="https://github.com/pytorch/vision/tree/master/torchvision/datasets" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/pytorch/vision/tree/master/torchvision/datasets</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> six.moves <span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> gzip</span><br><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">## progress bar of download_url</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_bar_updater</span><span class="params">()</span>:</span></span><br><span class="line">    pbar = tqdm(total=<span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar_update</span><span class="params">(count, block_size, total_size)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> pbar.total <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">and</span> total_size:</span><br><span class="line">            pbar.total = total_size</span><br><span class="line">        progress_bytes = count * block_size</span><br><span class="line">        <span class="comment">## `count` is incremental,</span></span><br><span class="line">        <span class="comment">## `pbar.n`: current state of the bar</span></span><br><span class="line">        pbar.update(progress_bytes - pbar.n)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bar_update</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_url</span><span class="params">(url, root, filename=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(root):</span><br><span class="line">        os.makedirs(root)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> filename:</span><br><span class="line">        filename = os.path.basename(url)</span><br><span class="line">    fpath = os.path.join(root, filename)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(fpath):</span><br><span class="line">         print(<span class="string">'&#123;&#125; exists, no need downloding!'</span>.format(filename))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'Downloading &#123;&#125; to &#123;&#125;'</span>.format(url, fpath))</span><br><span class="line">        urllib.request.urlretrieve(url, fpath,</span><br><span class="line">                               reporthook=gen_bar_updater())</span><br><span class="line">    extract_gzip(fpath, remove_finished=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract_gzip</span><span class="params">(gzip_path, remove_finished=False)</span>:</span></span><br><span class="line">    <span class="comment"># ofile = gzip_path.replace('.gz', '')</span></span><br><span class="line">    components = gzip_path.split(<span class="string">'/'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'mnist'</span> <span class="keyword">in</span> gzip_path:</span><br><span class="line">        components[<span class="number">-1</span>] = components[<span class="number">-1</span>].split(<span class="string">'.'</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">'cifar'</span> <span class="keyword">in</span> gzip_path:</span><br><span class="line">        components[<span class="number">-1</span>] = <span class="string">'cifar-10-batches-py'</span></span><br><span class="line">    ofile = <span class="string">'/'</span>.join(components)</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(ofile):</span><br><span class="line">        print(<span class="string">'&#123;&#125; exist!'</span>.format(ofile))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'Extracting &#123;&#125;'</span>.format(gzip_path))</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'mnist'</span> <span class="keyword">in</span> gzip_path:</span><br><span class="line">            <span class="keyword">with</span> open(ofile, <span class="string">'wb'</span>) <span class="keyword">as</span> out_file, \</span><br><span class="line">                    gzip.GzipFile(gzip_path) <span class="keyword">as</span> in_file:</span><br><span class="line">                out_file.write(in_file.read())</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">'cifar'</span> <span class="keyword">in</span> gzip_path:</span><br><span class="line">            tar = tarfile.open(gzip_path, <span class="string">"r:gz"</span>)</span><br><span class="line">            tar.extractall(os.path.dirname(gzip_path))</span><br><span class="line">            tar.close()</span><br><span class="line">        <span class="keyword">if</span> remove_finished:</span><br><span class="line">            os.remove(gzip_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_int</span><span class="params">(b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> int(codecs.encode(b, <span class="string">'hex'</span>), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_image_file</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(path, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">        <span class="keyword">assert</span> get_int(data[:<span class="number">4</span>]) == <span class="number">2051</span></span><br><span class="line">        num_images = get_int(data[<span class="number">4</span> : <span class="number">8</span>])</span><br><span class="line">        num_rows = get_int(data[<span class="number">8</span> : <span class="number">12</span>])</span><br><span class="line">        num_cols = get_int(data[<span class="number">12</span> : <span class="number">16</span>])</span><br><span class="line">        parsed = np.frombuffer(data, dtype=np.uint8, offset=<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">return</span> torch.from_numpy(parsed).view(num_images, <span class="number">1</span>, num_rows, num_cols)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_label_file</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(path, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">        <span class="keyword">assert</span> get_int(data[:<span class="number">4</span>]) == <span class="number">2049</span></span><br><span class="line">        num_images = get_int(data[<span class="number">4</span> : <span class="number">8</span>])</span><br><span class="line">        parsed = np.frombuffer(data, dtype=np.uint8, offset=<span class="number">8</span>)</span><br><span class="line">        <span class="keyword">return</span> torch.from_numpy(parsed).view(num_images).long()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unpickle</span><span class="params">(datafile)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> pickle</span><br><span class="line">    <span class="keyword">with</span> open(datafile, <span class="string">'rb'</span>) <span class="keyword">as</span> fo:</span><br><span class="line">        data_dict = pickle.load(fo, encoding=<span class="string">'bytes'</span>)</span><br><span class="line">    <span class="keyword">return</span> data_dict</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_batch</span><span class="params">(i, path, key=<span class="string">'data'</span>)</span>:</span></span><br><span class="line">    data_dict = unpickle(os.path.join(path, <span class="string">'data_batch_&#123;&#125;'</span>.format(i)))</span><br><span class="line">    <span class="keyword">return</span> data_dict[key]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prepare_dataset</span><span class="params">(name, path, Train=True)</span>:</span></span><br><span class="line">    training_file = name + <span class="string">'_train.pth'</span></span><br><span class="line">    testing_file = name + <span class="string">'_test.pth'</span></span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">'mnist'</span>:</span><br><span class="line">        <span class="keyword">if</span> Train:</span><br><span class="line">            data_file = training_file</span><br><span class="line">            img_name = <span class="string">'train-images-idx3-ubyte'</span></span><br><span class="line">            label_name = <span class="string">'train-labels-idx1-ubyte'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            data_file = testing_file</span><br><span class="line">            img_name = <span class="string">'t10k-images-idx3-ubyte'</span></span><br><span class="line">            label_name = <span class="string">'t10k-labels-idx1-ubyte'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> os.path.exists(os.path.join(path, data_file)):</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        dataset = (</span><br><span class="line">            read_image_file(os.path.join(path, img_name)),</span><br><span class="line">            read_label_file(os.path.join(path, label_name))</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> open(os.path.join(path, data_file), <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            torch.save(dataset, f)</span><br><span class="line">    <span class="keyword">elif</span> name == <span class="string">'cifar10'</span>:</span><br><span class="line">        cifar_path = os.path.join(path, <span class="string">'cifar-10-batches-py'</span>)</span><br><span class="line">        <span class="keyword">if</span> Train:</span><br><span class="line">            data_file = training_file</span><br><span class="line">            data_array = np.concatenate(</span><br><span class="line">                [data_batch(i, cifar_path, <span class="string">b'data'</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>)],</span><br><span class="line">                axis=<span class="number">0</span></span><br><span class="line">            )</span><br><span class="line">            label_array = np.concatenate(</span><br><span class="line">                [data_batch(i, cifar_path, <span class="string">b'labels'</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>)],</span><br><span class="line">                axis=<span class="number">0</span></span><br><span class="line">            )</span><br><span class="line">            torch_data = torch.from_numpy(data_array).view(<span class="number">-1</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">32</span>)</span><br><span class="line">            torch_label= torch.from_numpy(label_array).long()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            data_file = testing_file</span><br><span class="line">            data_dict = unpickle(os.path.join(cifar_path, <span class="string">'test_batch'</span>))</span><br><span class="line">            data_array = data_dict[<span class="string">b'data'</span>]</span><br><span class="line">            label_array = np.array(data_dict[<span class="string">b'labels'</span>])</span><br><span class="line">            torch_data = torch.from_numpy(data_array).view(<span class="number">-1</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">32</span>)</span><br><span class="line">            torch_label= torch.from_numpy(label_array).long()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> os.path.exists(os.path.join(path, data_file)):</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        dataset = (</span><br><span class="line">            torch_data,</span><br><span class="line">            torch_label,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> open(os.path.join(path, data_file), <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            torch.save(dataset, f)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_array</span><span class="params">(array, show=False)</span>:</span></span><br><span class="line">    array = np.array(array).transpose((<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>))</span><br><span class="line">    h, w, c = array.shape</span><br><span class="line">    array = array.squeeze()</span><br><span class="line">    <span class="keyword">if</span> c &gt; <span class="number">1</span>: cmap = <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">else</span>: cmap = <span class="string">'gray'</span></span><br><span class="line">    fig, ax = plt.subplots()</span><br><span class="line">    ax.imshow(array, cmap=cmap)</span><br><span class="line">    <span class="keyword">if</span> show:</span><br><span class="line">        plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_grid</span><span class="params">(arrays, n_cols=<span class="number">8</span>, cmap=<span class="string">'gray'</span>, show=False)</span>:</span></span><br><span class="line">    arrays = np.array(arrays).transpose((<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>))</span><br><span class="line">    _, h, w, c = arrays.shape</span><br><span class="line">    arrays = arrays.squeeze()</span><br><span class="line">    <span class="keyword">if</span> c &gt; <span class="number">1</span>: cmap = <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">else</span>: cmap = <span class="string">'gray'</span></span><br><span class="line">    num = arrays.shape[<span class="number">0</span>]</span><br><span class="line">    m, n = num // n_cols, n_cols</span><br><span class="line">    fig, axes = plt.subplots(m, n)</span><br><span class="line">    axes = axes.ravel()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        axes[i].set_axis_off()</span><br><span class="line">        axes[i].imshow(arrays[i], cmap=cmap)</span><br><span class="line">    <span class="keyword">if</span> show:</span><br><span class="line">        plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    urls = [</span><br><span class="line">            <span class="string">'http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz'</span>,</span><br><span class="line">            <span class="string">'http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz'</span>,</span><br><span class="line">            <span class="string">'http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz'</span>,</span><br><span class="line">            <span class="string">'http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz'</span>,</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        download_url(url, <span class="string">'data'</span>, filename=<span class="keyword">None</span>)</span><br><span class="line">    prepare_dataset(<span class="string">'mnist'</span>, <span class="string">'data'</span>, Train=<span class="keyword">True</span>)</span><br><span class="line">    prepare_dataset(<span class="string">'mnist'</span>, <span class="string">'data'</span>, Train=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># with open('data/mnist_test.pth', 'rb') as f:</span></span><br><span class="line">        <span class="comment"># test_set = torch.load(f)</span></span><br><span class="line">        <span class="comment"># test_images, test_labels = test_set</span></span><br><span class="line">    <span class="comment"># print(test_images[0].numpy().shape)</span></span><br><span class="line">    <span class="comment"># show_array(test_images[0].numpy(), show=False)</span></span><br><span class="line">    <span class="comment"># show_grid(test_images[:16].numpy(), show=True)</span></span><br><span class="line">    urls = [</span><br><span class="line">        <span class="string">'https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz'</span>,</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        download_url(url, <span class="string">'data'</span>, filename=<span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line">    prepare_dataset(<span class="string">'cifar10'</span>, <span class="string">'data'</span>, Train=<span class="keyword">True</span>)</span><br><span class="line">    prepare_dataset(<span class="string">'cifar10'</span>, <span class="string">'data'</span>, Train=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'data/cifar10_test.pth'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        test_set = torch.load(f)</span><br><span class="line">        test_images, test_labels = test_set</span><br><span class="line">    print(test_images[<span class="number">0</span>].numpy().shape)</span><br><span class="line">    show_array(test_images[<span class="number">0</span>].numpy(), show=<span class="keyword">False</span>)</span><br><span class="line">    show_grid(test_images[:<span class="number">16</span>].numpy(), show=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://github.com/pytorch/vision/blob/master/torchvision/datasets/utils.py" rel="external nofollow noopener noreferrer" target="_blank">pytorch torchvision:mnist.py</a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在考虑一个问题, 现在 PyTorch 等框架将网络训练整个流程都封装的很好, 比如数据下载, 预处理等等, 我在想如果以后遇到了非标准的数据集那该怎么办, 因此非常有必要自己将数据处理的部分从头动手做一遍, 于是有了下面的代码.&lt;/p&gt;
&lt;h2 id=&quot;代码剖析&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="深度学习" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习" scheme="http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>PyTorch-C++ 接口</title>
    <link href="http://yoursite.com/wiki/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/Python/PyTorch/PyTorch-Cpp/"/>
    <id>http://yoursite.com/wiki/程序语言/Python/PyTorch/PyTorch-Cpp/</id>
    <published>2019-04-14T04:01:00.000Z</published>
    <updated>2019-04-14T06:14:14.811Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>从 <code>https://pytorch.org/</code> 下载 LibTorch 代码</p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>写一个 Hello World 程序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;torch/torch.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    torch::Tensor tensor = torch::rand(&#123;<span class="number">2</span>, <span class="number">2</span>&#125;);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; tensor &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>Makefile 如下:</p><p>其中 <code>.../libtorch</code> 中保存着 LibTorch 的代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">TORCH = /Users/zhang/Codes/C++/pytorch-c++/libtorch</span><br><span class="line">CC = clang++</span><br><span class="line">CFLAGS = -Wall -std=c++0x</span><br><span class="line">CFLAGS += -I$(TORCH)/include -L$(TORCH)/lib</span><br><span class="line">CFLAGS += -I$(TORCH)/include/torch/csrc/api/include</span><br><span class="line">CLINKS = -ltorch.1 -lcaffe2 -lc10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NAME = ex1</span><br><span class="line">SRC = $(NAME).cpp</span><br><span class="line">TAR = $(NAME).out</span><br><span class="line"></span><br><span class="line">$(TAR) : $(SRC)</span><br><span class="line">$(CC) $(CFLAGS) -o <span class="variable">$@</span> $^ $(CLINKS)</span><br><span class="line"></span><br><span class="line">.PHONY : run clean</span><br><span class="line"></span><br><span class="line">run :</span><br><span class="line">LD_LIBRARY_PATH=$(TORCH)/lib ./$(TAR)</span><br><span class="line"></span><br><span class="line">clean :</span><br><span class="line">rm -rf *.out</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;从 &lt;code&gt;https://pytorch.org/&lt;/code&gt; 下载 LibTorch 代码&lt;/p&gt;
&lt;h2 id=&quot;Hello-W
      
    
    </summary>
    
      <category term="程序语言" scheme="http://yoursite.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="http://yoursite.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/Python/"/>
    
      <category term="PyTorch" scheme="http://yoursite.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/Python/PyTorch/"/>
    
    
      <category term="PyTorch" scheme="http://yoursite.com/tags/PyTorch/"/>
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Docker常用命令</title>
    <link href="http://yoursite.com/wiki/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/Docker/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/wiki/技术开发/Docker/Docker常用命令/</id>
    <published>2019-01-05T11:56:29.000Z</published>
    <updated>2019-01-11T03:35:38.035Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用命令总结"><a href="#常用命令总结" class="headerlink" title="常用命令总结"></a>常用命令总结</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -t 表示 tag, -f 表示 file, 默认是 Dockerfile, 最后的 . 不要忘了</span></span><br><span class="line">docker build -t ubuntu-16.04:v1 -f Dockerfile.gpu .</span><br><span class="line"></span><br><span class="line">docker ps -a</span><br><span class="line">docker image ls</span><br><span class="line">docker rm container_id</span><br><span class="line">docker rmi image_id</span><br><span class="line">docker run -v /path/of/host:/path/<span class="keyword">in</span>/constainer -p /port/of/host:/port/of/container -it image_id [<span class="built_in">command</span>]</span><br><span class="line">docker pull image_in_dockerhub</span><br><span class="line">docker commit -a author -m message container_id repository:tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># -a 表示 attach, -i 表示 iterative</span></span><br><span class="line">docker start -a -i container_id</span><br><span class="line"></span><br><span class="line"><span class="comment"># -f 表示 force</span></span><br><span class="line">docker stop</span><br><span class="line">docker <span class="built_in">kill</span> -f</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常用命令总结&quot;&gt;&lt;a href=&quot;#常用命令总结&quot; class=&quot;headerlink&quot; title=&quot;常用命令总结&quot;&gt;&lt;/a&gt;常用命令总结&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt
      
    
    </summary>
    
      <category term="技术开发" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="Docker" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/Docker/"/>
    
    
      <category term="技术开发" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Make Life Easier</title>
    <link href="http://yoursite.com/wiki/%E6%9F%90%E4%BA%9BTricks/Make-Life-Easier/"/>
    <id>http://yoursite.com/wiki/某些Tricks/Make-Life-Easier/</id>
    <published>2019-01-03T02:22:30.000Z</published>
    <updated>2019-01-05T03:01:21.649Z</updated>
    
    <content type="html"><![CDATA[<h2 id="我现在发现-为什么不用-Docker-…"><a href="#我现在发现-为什么不用-Docker-…" class="headerlink" title="我现在发现, 为什么不用 Docker …"></a>我现在发现, 为什么不用 Docker …</h2><p>是的, 赶紧把 Docker 用熟来. 装好 Docker 和 Nvidia-docker, 然后使用 sshfs 将远程服务器的文件映射到本地, 嗯, 真香~</p><ul><li><a href="https://docs.docker.com/install/" rel="external nofollow noopener noreferrer" target="_blank">Docker Documentation</a></li><li><a href="https://github.com/NVIDIA/nvidia-docker" rel="external nofollow noopener noreferrer" target="_blank">NVIDIA-docker Documentation</a></li></ul><h2 id="安装-oh-my-zsh"><a href="#安装-oh-my-zsh" class="headerlink" title="安装 oh-my-zsh"></a>安装 oh-my-zsh</h2><p>可供参考的资料:</p><ul><li><a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH</a></li><li><a href="https://www.howtoforge.com/tutorial/how-to-setup-zsh-and-oh-my-zsh-on-linux/" rel="external nofollow noopener noreferrer" target="_blank">https://www.howtoforge.com/tutorial/how-to-setup-zsh-and-oh-my-zsh-on-linux/</a></li></ul><p>在 Ubuntu 上, 使用:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install zsh</span><br><span class="line">chsh -s $(<span class="built_in">which</span> zsh) <span class="comment"># make your default shell</span></span><br><span class="line"><span class="built_in">export</span> SHELL=/bin/zsh <span class="comment"># if the above command has no effect</span></span><br><span class="line"><span class="built_in">exec</span> <span class="variable">$SHELL</span></span><br><span class="line">sudo apt-get install wget git</span><br><span class="line">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | zsh</span><br><span class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p><a href="https://www.smashingmagazine.com/2015/07/become-command-line-power-user-oh-my-zsh-z/" rel="external nofollow noopener noreferrer" target="_blank">Become A Command-Line Power User With Oh My ZSH And Z</a></p><p>在 <code>~/.zshrc</code> 中修改 <code>plugins</code> 那一行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugins=(git vi-mode z)</span><br></pre></td></tr></table></figure><p>要使用 <code>z</code> 的话, 需要先下载 <a href="https://github.com/rupa/z/blob/master/z.sh" rel="external nofollow noopener noreferrer" target="_blank">z.sh</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/rupa/z/blob/master/z.sh</span><br><span class="line">mv z.sh ~/.z</span><br><span class="line"><span class="built_in">exec</span> <span class="variable">$SHELL</span></span><br></pre></td></tr></table></figure><p>上面这种安装方法我认为是最简单的了, 另外还有一种方法可以参考:</p><p><a href="https://www.vultr.com/docs/boost-productivity-with-z-and-zsh-on-ubuntu" rel="external nofollow noopener noreferrer" target="_blank">Boost Productivity with Z and Zsh on Ubuntu</a></p><h2 id="Pyenv-管理多版本的-Python"><a href="#Pyenv-管理多版本的-Python" class="headerlink" title="Pyenv 管理多版本的 Python"></a>Pyenv 管理多版本的 Python</h2><ol><li>安装 Pyenv</li></ol><p>主页在: <a href="https://github.com/pyenv/pyenv" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/pyenv/pyenv</a>, Mac 用户可以使用 Homebrew 安装, 此时安装的路径在:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/Cellar/pyenv</span><br></pre></td></tr></table></figure><p>而 Ubuntu 用户可以使用如下一些命令安装 (先把 oh-my-zsh 装好)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/pyenv/pyenv.git ~/.pyenv</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export PYENV_ROOT="$HOME/.pyenv"'</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export PATH="$PYENV_ROOT/bin:$PATH"'</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">'if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then\n  eval "$(pyenv init -)"\nfi'</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">exec</span> <span class="variable">$SHELL</span></span><br></pre></td></tr></table></figure><ol start="2"><li>加快 Python/Anaconda 的下载速度</li></ol><p>要使各个版本的发行版加快下载, 可以修改为清华镜像, 比如我的 <code>anaconda3-4.2.0</code> 文件如下, 其中 <code>https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/</code> 是重点, 还有后面一大堆估计是编码的东西也给删掉了.</p><p>首先到 Pyenv 的如下目录:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pyenv_root=<span class="string">'~/.pyenv'</span> <span class="comment"># Ubuntu</span></span><br><span class="line">pyenv_root=/usr/<span class="built_in">local</span>/Cellar/pyenv <span class="comment"># Mac</span></span><br><span class="line">$(pyenv_root)/1.2.7/plugins/python-build/share/python-build</span><br></pre></td></tr></table></figure><p>然后修改 <code>anaconda3-4.2.0</code> 文件, 这里给的例子是修改 OSX 系统的:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$(anaconda_architecture 2&gt;/dev/null || true)</span>"</span> <span class="keyword">in</span></span><br><span class="line"><span class="string">"Linux-x86"</span> )</span><br><span class="line">  install_script <span class="string">"Anaconda3-4.2.0-Linux-x86"</span> <span class="string">"https://repo.continuum.io/archive/Anaconda3-4.2.0-Linux-x86.sh#1a8320635f2f06ec9d8610e77d6d0f9cb2c5d11d20a4ff7fcda113e04b0a8a50"</span> <span class="string">"anaconda"</span> verify_py35</span><br><span class="line">  ;;</span><br><span class="line"><span class="string">"Linux-x86_64"</span> )</span><br><span class="line">  install_script <span class="string">"Anaconda3-4.2.0-Linux-x86_64"</span> <span class="string">"https://repo.continuum.io/archive/Anaconda3-4.2.0-Linux-x86_64.sh#73b51715a12b6382dd4df3dd1905b531bd6792d4aa7273b2377a0436d45f0e78"</span> <span class="string">"anaconda"</span> verify_py35</span><br><span class="line">  ;;</span><br><span class="line"><span class="string">"MacOSX-x86_64"</span> )</span><br><span class="line">  <span class="comment">#install_script "Anaconda3-4.2.0-MacOSX-x86_64" "https://repo.continuum.io/archive/Anaconda3-4.2.0-MacOSX-x86_64.sh#95448921601e1952e01a17ba9767cd3621c154af7fc52dd6b7f57d462155a358" "anaconda" verify_py35</span></span><br><span class="line">  install_script <span class="string">"Anaconda3-4.2.0-MacOSX-x86_64"</span> <span class="string">"https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-4.2.0-MacOSX-x86_64.sh"</span> <span class="string">"anaconda"</span> verify_py35</span><br><span class="line">  ;;</span><br><span class="line">* )</span><br><span class="line">  &#123; <span class="built_in">echo</span></span><br><span class="line">    colorize 1 <span class="string">"ERROR"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">": The binary distribution of Anaconda3 is not available for <span class="variable">$(anaconda_architecture 2&gt;/dev/null || true)</span>."</span></span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">  &#125; &gt;&amp;2</span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line">  ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h2 id="修改-Pip-的镜像"><a href="#修改-Pip-的镜像" class="headerlink" title="修改 Pip 的镜像"></a>修改 Pip 的镜像</h2><p>修改 <code>~/.pip/pip.conf</code> 文件如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url=http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line">[install]</span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure><h2 id="conda-设置清华镜像"><a href="#conda-设置清华镜像" class="headerlink" title="conda 设置清华镜像"></a>conda 设置清华镜像</h2><p><a href="https://mirror.tuna.tsinghua.edu.cn/help/anaconda/" rel="external nofollow noopener noreferrer" target="_blank">Anaconda | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --<span class="built_in">set</span> show_channel_urls yes</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;我现在发现-为什么不用-Docker-…&quot;&gt;&lt;a href=&quot;#我现在发现-为什么不用-Docker-…&quot; class=&quot;headerlink&quot; title=&quot;我现在发现, 为什么不用 Docker …&quot;&gt;&lt;/a&gt;我现在发现, 为什么不用 Docker …&lt;/h2
      
    
    </summary>
    
      <category term="某些Tricks" scheme="http://yoursite.com/categories/%E6%9F%90%E4%BA%9BTricks/"/>
    
    
      <category term="Tricks" scheme="http://yoursite.com/tags/Tricks/"/>
    
  </entry>
  
  <entry>
    <title>工具性网站总结</title>
    <link href="http://yoursite.com/wiki/%E7%BD%91%E7%BB%9C%E8%B5%84%E6%BA%90/%E5%B7%A5%E5%85%B7%E6%80%A7%E7%BD%91%E7%AB%99%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/wiki/网络资源/工具性网站总结/</id>
    <published>2018-12-16T14:32:34.000Z</published>
    <updated>2018-12-16T14:50:33.405Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://sm.ms/" rel="external nofollow noopener noreferrer" target="_blank">https://sm.ms/</a> 好用的图床, 我目前 Wiki 的图像都是上传到这个网站上, 但是图像大小有限制, 5Mb 以内.</li><li><a href="https://www.soogif.com/compress" rel="external nofollow noopener noreferrer" target="_blank">https://www.soogif.com/compress</a> Gif 图像压缩, 这个压缩力度感觉很猛…</li><li><a href="https://www.iloveimg.com/zh-cn/compress-image" rel="external nofollow noopener noreferrer" target="_blank">https://www.iloveimg.com/zh-cn/compress-image</a> 图像压缩, 也很不错, 和上面那个结合使用</li><li><a href="https://zhuanlan.zhihu.com/p/35270383" rel="external nofollow noopener noreferrer" target="_blank">免费图床总结</a></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://sm.ms/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;https://sm.ms/&lt;/a&gt; 好用的图床, 我目前 Wiki 的图像都是上传到这个网
      
    
    </summary>
    
      <category term="网络资源" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="Resource" scheme="http://yoursite.com/tags/Resource/"/>
    
  </entry>
  
  <entry>
    <title>Hexo引用站内文章</title>
    <link href="http://yoursite.com/wiki/%E6%9F%90%E4%BA%9BTricks/Hexo%E5%BC%95%E7%94%A8%E7%AB%99%E5%86%85%E6%96%87%E7%AB%A0/"/>
    <id>http://yoursite.com/wiki/某些Tricks/Hexo引用站内文章/</id>
    <published>2018-12-16T13:08:02.000Z</published>
    <updated>2018-12-16T13:15:35.604Z</updated>
    
    <content type="html"><![CDATA[<p>在写博客的过程中需要引用自己写的文章, 根据下面的参考资料 1 中所述, 可以使用内置的标签插件的语法 <code>post_link</code> 来实现引用, 具体的语法是:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_link 文章文件名(不要后缀) 文章标题(可选) %&#125;</span><br><span class="line"><span class="comment"># &#123;% post_link slug [title] %&#125;</span></span><br></pre></td></tr></table></figure><p>其中 <code>slug</code> 就是 <code>_posts</code> 文件夹下需要引用的文章的 markdown 文件的名字，title 可以指定引用的文章需要显示的名字.</p><p>举个例子, 我的 Wiki 中 <code>程序语言-&gt;Python-&gt;实用程序-&gt;查找相似图片</code> 这篇文章中, 需要引用我的另外两篇文章, 相关写法如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+ &#123;% post_link 程序语言/Python/实用程序/Matplotlib响应按键浏览图片 %&#125;</span><br><span class="line">+ &#123;% post_link 程序语言/Python/实用程序/Logger用于<span class="built_in">log</span>记录 %&#125;</span><br></pre></td></tr></table></figure><p>因为这两篇文章都在 <code>source/_posts/程序语言/Python/实用程序/</code> 目录下.</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://yanyinhong.github.io/2017/05/03/Refer-article-in-hexo-post/" rel="external nofollow noopener noreferrer" target="_blank">Hexo博客搭建之引用站内文章</a></li><li><a href="http://www.jibing57.com/2017/10/30/how-to-use-post-link-on-hexo/" rel="external nofollow noopener noreferrer" target="_blank">Hexo引用站内文章</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在写博客的过程中需要引用自己写的文章, 根据下面的参考资料 1 中所述, 可以使用内置的标签插件的语法 &lt;code&gt;post_link&lt;/code&gt; 来实现引用, 具体的语法是:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
      <category term="某些Tricks" scheme="http://yoursite.com/categories/%E6%9F%90%E4%BA%9BTricks/"/>
    
    
      <category term="Tricks" scheme="http://yoursite.com/tags/Tricks/"/>
    
  </entry>
  
  <entry>
    <title>查找相似图片</title>
    <link href="http://yoursite.com/wiki/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/Python/%E5%AE%9E%E7%94%A8%E7%A8%8B%E5%BA%8F/%E6%9F%A5%E6%89%BE%E7%9B%B8%E4%BC%BC%E5%9B%BE%E7%89%87/"/>
    <id>http://yoursite.com/wiki/程序语言/Python/实用程序/查找相似图片/</id>
    <published>2018-12-16T12:19:01.000Z</published>
    <updated>2018-12-16T14:31:40.030Z</updated>
    
    <content type="html"><![CDATA[<p>找相似图片的原理主要有颜色直方图, 感知哈希算法等, 详情可以看参考资料中阮一峰的博客, 相当之详细.</p><p>先看看效果吧:</p><p><img src="https://i.loli.net/2018/12/16/5c165e0ed7c3c.gif" alt="20181216221357.gif"></p><h2 id="ImageSimilarity-实现"><a href="#ImageSimilarity-实现" class="headerlink" title="ImageSimilarity 实现"></a>ImageSimilarity 实现</h2><p>要运行该代码, 对于 python 库, 主要需要安装 <code>pillow</code> 以及 <code>tqdm</code>. 另外, 还需要我写的 <code>ImageViewer.py</code> 以及 <code>Logger.py</code> 文件, 它们分别可以在如下位置找到:</p><ul><li><a href="/wiki/程序语言/Python/实用程序/Matplotlib响应按键浏览图片/" title="Matplotlib响应按键浏览图片">Matplotlib响应按键浏览图片</a></li><li><a href="/wiki/程序语言/Python/实用程序/Logger用于log记录/" title="Logger用于log记录">Logger用于log记录</a></li></ul><p>下面实现的 <code>Finder</code> 对象中的 <code>find_all</code> 方法, 传入要搜寻的目录, 从该目录中找到和目标图像相似的图像. 如果在运行程序时, 设置 <code>--show True</code>, 那么可以使用 <code>ImageViewer</code> 提供的功能, 方便的通过快捷键浏览图像.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> join, exists</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> ImageViewer <span class="keyword">import</span> ImageViewer</span><br><span class="line"><span class="keyword">from</span> Logger <span class="keyword">import</span> InfoLogger, args_namespace</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(<span class="string">'Find Similar Images'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--log_checkpoint'</span>, type=str, default=<span class="string">'./infologger'</span>, help=<span class="string">"log files savepath"</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--log_file'</span>, type=str, default=<span class="string">"&#123;:%Y-%m-%d-%H:%M:%S&#125;.log"</span>.format(datetime.now()), help=<span class="string">'logfile name'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--image'</span>, type=str, default=<span class="string">"./Set14/monarch.png"</span>, help=<span class="string">'base image name'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--search'</span>, type=str, default=<span class="string">"./bsd100"</span>, help=<span class="string">'which dir to search similar images'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--rank'</span>, type=int, default=<span class="number">10</span>, help=<span class="string">'how many similar images to search'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--method'</span>, type=str, default=<span class="string">'color_hist'</span>, help=<span class="string">'similar image algorithm, &#123;color_hist | avhash&#125;'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--show'</span>, type=str, default=<span class="string">'False'</span>,  help=<span class="string">'whether show similar images or not'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--savepath'</span>, type=str, default=<span class="string">'./ResultImgs'</span>, help=<span class="string">'path to save base image and similar_imgs'</span>)</span><br><span class="line"></span><br><span class="line">opt = parser.parse_args()</span><br><span class="line"></span><br><span class="line">logger = InfoLogger(opt)</span><br><span class="line">logger.info(args_namespace(opt))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Finder</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, img_path)</span>:</span></span><br><span class="line">        self.base_img = img_path</span><br><span class="line">        self.similar_imgs = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_indir</span><span class="params">(self, img_dir, rank=<span class="number">20</span>, method=<span class="string">'color_hist'</span>)</span>:</span></span><br><span class="line">        <span class="string">"""method = &#123;'color_hist' | 'avhash'&#125;"""</span></span><br><span class="line">        logger.info(<span class="string">'Find similar image of: &#123;&#125;'</span>.format(self.base_img))</span><br><span class="line">        logger.info(<span class="string">'Searching directory: &#123;&#125;'</span>.format(img_dir))</span><br><span class="line">        seq = []</span><br><span class="line">        <span class="keyword">if</span> method == <span class="string">'avhash'</span>:</span><br><span class="line">            base_h = self.avhash(self.base_img)</span><br><span class="line">            <span class="keyword">for</span> filename <span class="keyword">in</span> tqdm(os.listdir(img_dir)):</span><br><span class="line">                fullname = join(img_dir, filename)</span><br><span class="line">                seq.append((fullname, self.hamming(self.avhash(fullname), base_h)))</span><br><span class="line">        <span class="keyword">elif</span> method == <span class="string">'color_hist'</span>:</span><br><span class="line">            <span class="keyword">for</span> filename <span class="keyword">in</span> tqdm(os.listdir(img_dir)):</span><br><span class="line">                fullname = join(img_dir, filename)</span><br><span class="line">                seq.append((fullname, <span class="number">-1</span> * self.color_hist(self.base_img, fullname, mode=<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> idx, (f, ham) <span class="keyword">in</span> enumerate(sorted(seq, key=<span class="keyword">lambda</span> i: i[<span class="number">1</span>])):</span><br><span class="line">            <span class="keyword">if</span> idx &gt;= rank: <span class="keyword">break</span></span><br><span class="line">            logger.info(<span class="string">"&#123;&#125;\t&#123;&#125;"</span>.format(ham, f))</span><br><span class="line">            self.similar_imgs.append(f)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_similar_imgs</span><span class="params">(self)</span>:</span></span><br><span class="line">        im = np.array(Image.open(self.base_img).convert(<span class="string">'RGB'</span>))</span><br><span class="line">        fig, ax = plt.subplots()</span><br><span class="line">        ax.imshow(im)</span><br><span class="line">        ax.set_title(<span class="string">'Base Image'</span>)</span><br><span class="line">        viewer = ImageViewer(self.similar_imgs)</span><br><span class="line">        viewer.fig.suptitle(<span class="string">'Similar Images'</span>)</span><br><span class="line">        viewer.show()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># https://blog.csdn.net/birdy_/article/details/78822901</span></span><br><span class="line">    <span class="comment"># https://blog.csdn.net/Mengwei_Ren/article/details/73359298</span></span><br><span class="line">    <span class="comment"># base on color histogram</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">difference</span><span class="params">(self, hist1, hist2)</span>:</span></span><br><span class="line">        sum1 = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(hist1)):</span><br><span class="line">           <span class="keyword">if</span> (hist1[i] == hist2[i]):</span><br><span class="line">              sum1 += <span class="number">1</span></span><br><span class="line">           <span class="keyword">else</span>:</span><br><span class="line">               sum1 += <span class="number">1</span> - float(abs(hist1[i] - hist2[i])) / max(hist1[i], hist2[i])</span><br><span class="line">        <span class="keyword">return</span> sum1/len(hist1)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">color_hist</span><span class="params">(self, path1 , path2 , mode=<span class="number">2</span>)</span>:</span></span><br><span class="line">        <span class="keyword">if</span>(mode == <span class="number">3</span>):</span><br><span class="line">            img1 = Image.open(path1).resize((<span class="number">8</span>,<span class="number">8</span>)).convert(<span class="string">'1'</span>)</span><br><span class="line">            img2 = Image.open(path2).resize((<span class="number">8</span>,<span class="number">8</span>)).convert(<span class="string">'1'</span>)</span><br><span class="line">            hist1 = list(img1.getdata())</span><br><span class="line">            hist2 = list(img2.getdata())</span><br><span class="line">            <span class="keyword">return</span> self.difference(hist1, hist2)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># preprocess</span></span><br><span class="line">        img1 = Image.open(path1).resize((<span class="number">256</span>,<span class="number">256</span>)).convert(<span class="string">'RGB'</span>)</span><br><span class="line">        img2 = Image.open(path2).resize((<span class="number">256</span>,<span class="number">256</span>)).convert(<span class="string">'RGB'</span>)</span><br><span class="line">        <span class="keyword">if</span>(mode == <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> self.difference(img1.histogram(), img2.histogram())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(mode == <span class="number">2</span>):</span><br><span class="line">            sum = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">                    hist1 = img1.crop((i*<span class="number">64</span>, j*<span class="number">64</span>, i*<span class="number">64</span>+<span class="number">63</span>, j*<span class="number">64</span>+<span class="number">63</span>)).copy().histogram()</span><br><span class="line">                    hist2 = img2.crop((i*<span class="number">64</span>, j*<span class="number">64</span>, i*<span class="number">64</span>+<span class="number">63</span>, j*<span class="number">64</span>+<span class="number">63</span>)).copy().histogram()</span><br><span class="line">                    sum += self.difference(hist1, hist2)</span><br><span class="line">            <span class="keyword">return</span> sum/<span class="number">16</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># http://www.ruanyifeng.com/blog/2011/07/principle_of_similar_image_search.html</span></span><br><span class="line">    <span class="comment"># base on Perceptual hash algorithm</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">avhash</span><span class="params">(self, im)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(im, Image.Image):</span><br><span class="line">            im = Image.open(im)</span><br><span class="line">        im = im.resize((<span class="number">8</span>, <span class="number">8</span>), Image.ANTIALIAS).convert(<span class="string">'L'</span>)</span><br><span class="line">        avg = reduce(<span class="keyword">lambda</span> x, y: x + y, im.getdata()) / <span class="number">64.</span></span><br><span class="line">        <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x, yz: x | (yz[<span class="number">1</span>] &lt;&lt; yz[<span class="number">0</span>]), \</span><br><span class="line">                      enumerate(map(<span class="keyword">lambda</span> i: <span class="number">0</span> <span class="keyword">if</span> i &lt; avg <span class="keyword">else</span> <span class="number">1</span>, im.getdata())), \</span><br><span class="line">                      <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hamming</span><span class="params">(self, h1, h2)</span>:</span></span><br><span class="line">        h, d = <span class="number">0</span>, h1 ^ h2</span><br><span class="line">        <span class="keyword">while</span> d:</span><br><span class="line">            h += <span class="number">1</span></span><br><span class="line">            d &amp;= d - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> h</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    finder = Finder(opt.image)</span><br><span class="line">    finder.find_indir(opt.search, rank=opt.rank, method=opt.method)</span><br><span class="line">    <span class="keyword">if</span> opt.show == <span class="string">'True'</span>:</span><br><span class="line">        finder.show_similar_imgs()</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="http://www.ruanyifeng.com/blog/2011/07/principle_of_similar_image_search.html" rel="external nofollow noopener noreferrer" target="_blank">相似图片搜索的原理</a></li><li><a href="http://www.ruanyifeng.com/blog/2013/03/similar_image_search_part_ii.html" rel="external nofollow noopener noreferrer" target="_blank">相似图片搜索的原理（二）</a></li><li><a href="https://blog.csdn.net/birdy_/article/details/78822901" rel="external nofollow noopener noreferrer" target="_blank">【python + PIL】图像相似度检测</a></li><li><a href="https://blog.csdn.net/Mengwei_Ren/article/details/73359298" rel="external nofollow noopener noreferrer" target="_blank">【图像处理】图像检索的三种python实现(直方图/OpenCV/哈希法)</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;找相似图片的原理主要有颜色直方图, 感知哈希算法等, 详情可以看参考资料中阮一峰的博客, 相当之详细.&lt;/p&gt;
&lt;p&gt;先看看效果吧:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/12/16/5c165e0ed7c3c.gif&quot; alt=
      
    
    </summary>
    
      <category term="程序语言" scheme="http://yoursite.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="http://yoursite.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/Python/"/>
    
      <category term="实用程序" scheme="http://yoursite.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/Python/%E5%AE%9E%E7%94%A8%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Matplotlib" scheme="http://yoursite.com/tags/Matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>Logger用于log记录</title>
    <link href="http://yoursite.com/wiki/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/Python/%E5%AE%9E%E7%94%A8%E7%A8%8B%E5%BA%8F/Logger%E7%94%A8%E4%BA%8Elog%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/wiki/程序语言/Python/实用程序/Logger用于log记录/</id>
    <published>2018-12-16T11:11:57.000Z</published>
    <updated>2018-12-16T12:11:31.502Z</updated>
    
    <content type="html"><![CDATA[<p>写程序进行日志记录真的非常方便, 这里提供 <code>InfoLogger</code> 类, 用于对日志的记录. 比如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">logger = InfoLogger(opt=<span class="keyword">None</span>)</span><br><span class="line">logger.info(<span class="string">'Hello World'</span>)</span><br></pre></td></tr></table></figure><p>默认创建 <code>log/</code> 文件夹并在该文件夹中记录日志, 如果要修改目录, 那么就要传入 <code>opt</code> 对象, 该对象需要分别指定 <code>opt.log_checkpoint</code> 属性说明日志存放的目录, 以及 <code>opt.log_file</code> 属性: log 文件的名字.</p><p>另外还提供 <code>args_namespace</code> 函数, 用于处理 <code>argparse.Namespace</code> 对象 (即 <code>opt = parser.parse_args()</code>). 具体效果看下面的内容.</p><p>关于 opt 对象, 有 <code>log_checkpoint</code> 或 <code>log_file</code> 就行, 没有这两个属性就采用默认值.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">parser = argparse.ArgumentParser(<span class="string">'Logger'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--log_checkpoint'</span>, type=str, default=<span class="string">'log/'</span>, help=<span class="string">'log directory'</span>)</span><br><span class="line">opt = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">opt = type(<span class="string">'Option'</span>, (object,), &#123;&#125;)</span><br><span class="line">opt.log_checkpoint = <span class="string">'log/'</span></span><br></pre></td></tr></table></figure><h2 id="InfoLogger-类的实现"><a href="#InfoLogger-类的实现" class="headerlink" title="InfoLogger 类的实现"></a>InfoLogger 类的实现</h2><figure class="highlight python"><figcaption><span>Logger.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint <span class="keyword">as</span> pp</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> exists, join</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">args_namespace</span><span class="params">(opt)</span>:</span></span><br><span class="line">    res = [<span class="string">"&#123;&#125;: &#123;&#125;\n"</span>.format(attr, getattr(opt, attr)) <span class="keyword">for</span> attr <span class="keyword">in</span> vars(opt)]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Argument Settings:\n"</span> + \</span><br><span class="line">            <span class="string">"===============================================================\n"</span> + \</span><br><span class="line">            <span class="string">""</span>.join(res) + \</span><br><span class="line">            <span class="string">"==============================================================="</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InfoLogger</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, opt=None)</span>:</span></span><br><span class="line">        super(InfoLogger, self).__init__()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> getattr(opt, <span class="string">'log_checkpoint'</span>, <span class="keyword">None</span>):</span><br><span class="line">            log_checkpoint = <span class="string">'log'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            log_checkpoint = opt.log_checkpoint</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> getattr(opt, <span class="string">'log_file'</span>, <span class="keyword">None</span>):</span><br><span class="line">            log_file = <span class="string">"&#123;:%Y-%m-%d-%H:%M:%S&#125;.log"</span>.format(datetime.now())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            log_file = opt.log_file</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> exists(log_checkpoint):</span><br><span class="line">            os.makedirs(log_checkpoint)</span><br><span class="line"></span><br><span class="line">        logging.basicConfig(level=logging.INFO)</span><br><span class="line">        self.logger = logging.getLogger(<span class="string">'main'</span>)</span><br><span class="line">        handler = logging.FileHandler(join(log_checkpoint, log_file), mode=<span class="string">'w'</span>)</span><br><span class="line">        handler.setLevel(logging.INFO)</span><br><span class="line">        formatter = logging.Formatter(<span class="string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span>, </span><br><span class="line">                                      datefmt=<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">        handler.setFormatter(formatter)</span><br><span class="line">        self.logger.addHandler(handler)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.logger.__getattribute__(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># you can also use argparse, I use `type` here just for convenience.</span></span><br><span class="line">    opt = type(<span class="string">'Option'</span>, (object, ), &#123;&#125;)</span><br><span class="line">    opt.log_checkpoint = <span class="string">'./infologger'</span></span><br><span class="line">    opt.log_file = <span class="string">'test.log'</span></span><br><span class="line"></span><br><span class="line">    logger = InfoLogger(opt)</span><br><span class="line">    logger.info(args_namespace(opt))</span><br><span class="line">    logger.info(<span class="string">'hello world'</span>)</span><br></pre></td></tr></table></figure><p>demo 效果如下:</p><p><img src="https://i.loli.net/2018/12/16/5c1640ab4af4f.png" alt="20181216-log.png"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;写程序进行日志记录真的非常方便, 这里提供 &lt;code&gt;InfoLogger&lt;/code&gt; 类, 用于对日志的记录. 比如:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s
      
    
    </summary>
    
      <category term="程序语言" scheme="http://yoursite.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="http://yoursite.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/Python/"/>
    
      <category term="实用程序" scheme="http://yoursite.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/Python/%E5%AE%9E%E7%94%A8%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Matplotlib响应按键浏览图片</title>
    <link href="http://yoursite.com/wiki/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/Python/%E5%AE%9E%E7%94%A8%E7%A8%8B%E5%BA%8F/Matplotlib%E5%93%8D%E5%BA%94%E6%8C%89%E9%94%AE%E6%B5%8F%E8%A7%88%E5%9B%BE%E7%89%87/"/>
    <id>http://yoursite.com/wiki/程序语言/Python/实用程序/Matplotlib响应按键浏览图片/</id>
    <published>2018-12-16T11:10:40.000Z</published>
    <updated>2018-12-16T12:11:08.616Z</updated>
    
    <content type="html"><![CDATA[<p>最近写了一个查找相似图像的算法, 目标是给定 A 图片, 然后在目录 <code>B/</code> 中查找和 A 图片相似的图片. 假设在 <code>B/</code> 中我找到了 10 张相似图片, 但是要查看这 10 张图, 在 Mac 上我先到文件夹下, 然后使用 preview 进行查看, 有点麻烦, 我想是否可以用 matplotlib 显示这些图片, 然后按下 <code>n</code> 就浏览下一张, 按下 <code>N</code> 浏览上一张. 于是就有了下面的脚本, 同时复习一下 Matplotlib 的事件处理代码如何写.</p><p><img src="https://i.loli.net/2018/12/16/5c163d7c4311f.gif" alt="2018-12-16 19.50.03.gif"></p><h2 id="ImageViewer-类的实现"><a href="#ImageViewer-类的实现" class="headerlink" title="ImageViewer 类的实现"></a>ImageViewer 类的实现</h2><p><code>ImageViewer</code> 类的具体实现如下, <code>img_list</code> 是包含图像绝对路径的 list. 代码最后给了 demo, 很简单. demo 中的效果是浏览一个文件夹中的图片, 按 <code>n</code> 访问下一张, 按 <code>N</code> 访问上一张.</p><figure class="highlight python"><figcaption><span>ImageViewer.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImageViewer</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, img_list)</span>:</span></span><br><span class="line">        self.img_list = list(img_list)</span><br><span class="line">        self.fig, self.ax = plt.subplots()</span><br><span class="line">        self.num_of_img = len(self.img_list)</span><br><span class="line">        self.indicator = <span class="number">0</span></span><br><span class="line">        self.connect()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">path2array</span><span class="params">(self, img_path)</span>:</span></span><br><span class="line">        im = Image.open(img_path).convert(<span class="string">'RGB'</span>)</span><br><span class="line">        im = np.array(im)</span><br><span class="line">        <span class="keyword">return</span> im</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.img_list:</span><br><span class="line">            im = self.path2array(self.img_list[self.indicator])</span><br><span class="line">            self.ax.imshow(im)</span><br><span class="line">            plt.show()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.cidkey = self.fig.canvas.mpl_connect(</span><br><span class="line">            <span class="string">'key_press_event'</span>, self.on_keypress)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_keypress</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.img_list:</span><br><span class="line">            <span class="keyword">if</span> event.key <span class="keyword">in</span> [<span class="string">'n'</span>]:</span><br><span class="line">                self.indicator += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> event.key <span class="keyword">in</span> [<span class="string">'N'</span>]:</span><br><span class="line">                self.indicator -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># dont worry about negative self.indicator, % will automatically handle it</span></span><br><span class="line">            self.indicator = self.indicator % self.num_of_img</span><br><span class="line">            im = self.path2array(self.img_list[self.indicator])</span><br><span class="line">            self.ax.imshow(im)</span><br><span class="line"></span><br><span class="line">        self.fig.canvas.draw()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line">    <span class="keyword">from</span> os.path <span class="keyword">import</span> join, exists</span><br><span class="line">    img_dir = <span class="string">'./bsd100'</span></span><br><span class="line">    img_list = [join(img_dir, name) <span class="keyword">for</span> name <span class="keyword">in</span> os.listdir(img_dir)]</span><br><span class="line">    viewer = ImageViewer(img_list)</span><br><span class="line">    viewer.show()</span><br></pre></td></tr></table></figure><h3 id="按键响应"><a href="#按键响应" class="headerlink" title="按键响应"></a>按键响应</h3><p>Matplotlib 提供 <code>key_press_event</code>, 回调函数为 <code>self.on_keypress</code>. 在该函数中, 使用 <code>self.indicator</code> 记录当前指向第几张图片 (从 0 开始计数).</p><p>为了循环访问的效果, 使用求余符号 <code>%</code> 控制 <code>self.indicator</code> 的变化.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.cidkey = self.fig.canvas.mpl_connect(</span><br><span class="line">        <span class="string">'key_press_event'</span>, self.on_keypress)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_keypress</span><span class="params">(self, event)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.img_list:</span><br><span class="line">        <span class="keyword">if</span> event.key <span class="keyword">in</span> [<span class="string">'n'</span>]:</span><br><span class="line">            self.indicator += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> event.key <span class="keyword">in</span> [<span class="string">'N'</span>]:</span><br><span class="line">            self.indicator -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># dont worry about negative self.indicator, % will automatically handle it</span></span><br><span class="line">        self.indicator = self.indicator % self.num_of_img</span><br><span class="line">        im = self.path2array(self.img_list[self.indicator])</span><br><span class="line">        self.ax.imshow(im)</span><br><span class="line"></span><br><span class="line">    self.fig.canvas.draw()</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近写了一个查找相似图像的算法, 目标是给定 A 图片, 然后在目录 &lt;code&gt;B/&lt;/code&gt; 中查找和 A 图片相似的图片. 假设在 &lt;code&gt;B/&lt;/code&gt; 中我找到了 10 张相似图片, 但是要查看这 10 张图, 在 Mac 上我先到文件夹下, 然后使用
      
    
    </summary>
    
      <category term="程序语言" scheme="http://yoursite.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="http://yoursite.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/Python/"/>
    
      <category term="实用程序" scheme="http://yoursite.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/Python/%E5%AE%9E%E7%94%A8%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Matplotlib" scheme="http://yoursite.com/tags/Matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>有意思的Github项目</title>
    <link href="http://yoursite.com/wiki/%E7%BD%91%E7%BB%9C%E8%B5%84%E6%BA%90/%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84Github%E9%A1%B9%E7%9B%AE/"/>
    <id>http://yoursite.com/wiki/网络资源/有意思的Github项目/</id>
    <published>2018-11-28T15:08:11.000Z</published>
    <updated>2018-11-28T15:11:39.705Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git-相关"><a href="#Git-相关" class="headerlink" title="Git 相关"></a>Git 相关</h2><ul><li><a href="https://github.com/pcottle/learnGitBranching" rel="external nofollow noopener noreferrer" target="_blank">An interactive git visualization to challenge and educate!</a> 将 Git 的操作可视化, 我觉得之后对于 Git 的学习会很有帮助!</li></ul><h2 id="科研"><a href="#科研" class="headerlink" title="科研"></a>科研</h2><h3 id="GAN"><a href="#GAN" class="headerlink" title="GAN"></a>GAN</h3><ul><li><a href="https://github.com/CSAILVision/gandissect" rel="external nofollow noopener noreferrer" target="_blank">Pytorch-based tools for visualizing and understanding the neurons of a GAN.</a> 现在 GAN 的发展简直太快了…</li></ul><p><img src="http://gandissect.res.ibm.com/ganpaint.html?project=churchoutdoor&amp;layer=layer4" alt="图片来自 Github: GANDissect"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Git-相关&quot;&gt;&lt;a href=&quot;#Git-相关&quot; class=&quot;headerlink&quot; title=&quot;Git 相关&quot;&gt;&lt;/a&gt;Git 相关&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pcottle/learnGitBran
      
    
    </summary>
    
      <category term="网络资源" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="Resource" scheme="http://yoursite.com/tags/Resource/"/>
    
  </entry>
  
  <entry>
    <title>DetailViewer简要介绍</title>
    <link href="http://yoursite.com/wiki/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/Python/Matplotlib/DetailViewer%E7%AE%80%E8%A6%81%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/wiki/程序语言/Python/Matplotlib/DetailViewer简要介绍/</id>
    <published>2018-11-27T06:56:46.000Z</published>
    <updated>2018-11-27T08:10:35.528Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DetailViewer-简要介绍"><a href="#DetailViewer-简要介绍" class="headerlink" title="DetailViewer 简要介绍"></a>DetailViewer 简要介绍</h2><p>DetaiViewer 是用来放大图像细节的工具, 它意在帮助从事底层图像处理的科研人员方便对比各种算法的效果.</p><p>比如在图像去噪, 图像超分辨率的论文中, 我们常常需要将自己的算法和其他的 state-of-the-art 的算法进行视觉效果上的比较, DetailViewer 就是为了方便这一过程, 效果如下图:</p><p><img src="https://i.loli.net/2018/11/27/5bfced288a415.gif" alt="2018-11-14 23.32.10.gif"></p><p>下面介绍使用 Python 和 Matplotlib 实现 DetailViewer 的过程.</p><p>DetailViewer 包含两个主要的 API:</p><ul><li><code>FigureInfo</code> class</li><li><code>RectangleSelection</code> class</li></ul><p>其中最为重要的是 <code>RectangleSelection</code> 这个类了, 你可以直接将一个 <code>matplotlib.figure.Figure</code> 对象传入到这个类中, 然后就可以利用其中的画出正方形以及移动正方形并动态显示图像细节等功能.</p><p>而 <code>FigureInfo</code> 只是根据你传入的图像大小和数量简单设置这些图像的布局, 这部分内容其实你自己也可以写. 下面首先重点说一下 <code>RectangleSelection</code> 的实现.</p><p>在详细说明细节之前, 先介绍一下我的编程环境:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Anaconda Python 3.5.6</span><br><span class="line">Matplotlib 3.0.0 <span class="comment"># 注意 Matplotlib 的版本至少是 3.0.0, 因为会用到 matplotlib.axes.Axes 对象的 inset_axes 方法.</span></span><br><span class="line">Numpy 1.14.2</span><br><span class="line">PIL (pillow) 5.1.0</span><br><span class="line">scikit-image 0.14.0</span><br></pre></td></tr></table></figure><h2 id="面向对象-API"><a href="#面向对象-API" class="headerlink" title="面向对象 API"></a>面向对象 API</h2><p>首先需要认识 Matplotlib 中的 Artist, 关于这一点, 可以详细学习 <a href="https://matplotlib.org/users/artists.html" rel="external nofollow noopener noreferrer" target="_blank">Matplotlib Artist Tutorial</a>, Artists 主要有两种类型: primitives 和 containers. 像 <code>Line2D</code>, <code>Rectangle</code>, <code>Text</code>, <code>AxesImage</code> 等都属于 primitives, 而 <code>Axes</code> 和 <code>Subplots</code> 就属于 containers. 明确 Artists 的概念后, 再来理解一下 <code>Axes</code> 和 <code>Subplots</code> 的关系, 比如对于如下代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots()</span><br></pre></td></tr></table></figure><p>它返回两个对象: <code>matplotlib.figure.Figure</code> 以及 <code>matplotlib.axes.Axes</code>, 上面那句代码相当于如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 和下面的代码还是有一些差异的, 但是本质上是类似的</span></span><br><span class="line">ax = fig.add_axes([<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">1.</span>])</span><br></pre></td></tr></table></figure><p>另外需要注意的是 <code>plt.subplots()</code> 会返回一个 <code>Axes</code> 对象或者一个 Numpy 数组, 比如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>fig, ax = plt.subplots()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(ax)</span><br><span class="line">AxesSubplot(<span class="number">0.125</span>,<span class="number">0.11</span>;<span class="number">0.775</span>x0<span class="number">.77</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fig, axes = plt.subplots(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(repr(axes))</span><br><span class="line">array([[&lt;matplotlib.axes._subplots.AxesSubplot object at <span class="number">0x11537a160</span>&gt;,</span><br><span class="line">        &lt;matplotlib.axes._subplots.AxesSubplot object at <span class="number">0x115392748</span>&gt;],</span><br><span class="line">       [&lt;matplotlib.axes._subplots.AxesSubplot object at <span class="number">0x1153a9cc0</span>&gt;,</span><br><span class="line">        &lt;matplotlib.axes._subplots.AxesSubplot object at <span class="number">0x11744b278</span>&gt;]],</span><br><span class="line">      dtype=object)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(axes.shape)</span><br><span class="line">(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于这里 axes 的 shape 是 (2, 2), 那么之后为了用 for 循环方便访问每个 ax, 可以使用:</span></span><br><span class="line"><span class="comment"># for ax in axes.ravel() (或者使用 axes.flat)</span></span><br></pre></td></tr></table></figure><p>所以在代码中, 为了处理的统一性, 我会对 <code>ax</code> 使用 <code>ax = np.array(ax)</code> 进行转换, 方便处理, 防止用户只传入一张图片.</p><h2 id="Matplotlib-中的事件处理和-picking"><a href="#Matplotlib-中的事件处理和-picking" class="headerlink" title="Matplotlib 中的事件处理和 picking"></a>Matplotlib 中的事件处理和 picking</h2><p>Matplotlib 提供如下事件处理, 更为详细的信息请查看: <a href="https://matplotlib.org/users/event_handling.html" rel="external nofollow noopener noreferrer" target="_blank">https://matplotlib.org/users/event_handling.html</a></p><p><img src="https://i.loli.net/2018/11/27/5bfcf5bb09545.png" alt="matplotlib_event.png"></p><p>在 DetailViewer 中的 <code>RectangleSeletion</code> 类中, 事件处理使用 <code>connect</code> 方法完成:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.cidpress = self.fig.canvas.mpl_connect(</span><br><span class="line">        <span class="string">'button_press_event'</span>, self.on_press)</span><br><span class="line">    self.cidmotion = self.fig.canvas.mpl_connect(</span><br><span class="line">        <span class="string">'motion_notify_event'</span>, self.on_motion)</span><br><span class="line">    self.cidpick = self.fig.canvas.mpl_connect(</span><br><span class="line">        <span class="string">'pick_event'</span>, self.on_pick)</span><br><span class="line">    self.cidrelease = self.fig.canvas.mpl_connect(</span><br><span class="line">        <span class="string">'button_release_event'</span>, self.on_release)</span><br><span class="line">    self.cidkey = self.fig.canvas.mpl_connect(</span><br><span class="line">        <span class="string">'key_press_event'</span>, self.on_keypress)</span><br></pre></td></tr></table></figure><p>从上至下依次是:</p><ul><li>鼠标按下事件: 确认鼠标的位置, 判断鼠标是否在某个 Axes 中; 只允许画一个矩形;</li><li>鼠标移动事件: 确认鼠标位置; 确认用户有画矩形的意图; 用户画出矩形; 用户移动矩形的处理方式;</li><li>矩形移动事件: 用户如果移动矩形, 各种状态的变化;</li><li>鼠标释放事件: 各种状态的变化; 如果用户画出了矩形, 那么要放大图像;</li><li>按键响应事件: 针对用户按下键盘上的按键, 做出相应的响应.</li></ul><p>每个事件要跟一个操作进行联系, 需要使用 <code>FigureCanvasBase.mpl_connect</code> 方法, 比如 <code>self.fig.canvas.mpl_connect</code> 方法, 该方法返回一个事件 connection id, 简称 cid, 之后可以用于 <code>mpl_disconnect</code> 方法.</p><p>下面依次介绍各个事件.</p><h3 id="状态变量"><a href="#状态变量" class="headerlink" title="状态变量"></a>状态变量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RectangleSelection</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, fig)</span>:</span></span><br><span class="line">        self.fig = fig <span class="comment"># 画板</span></span><br><span class="line">        self.cur_axes = <span class="keyword">None</span> <span class="comment"># 鼠标当前所在的 axes</span></span><br><span class="line">        self.rect = <span class="keyword">None</span> <span class="comment"># 用户画出的矩形</span></span><br><span class="line">        self.x0, self.y0 = <span class="keyword">None</span>, <span class="keyword">None</span> <span class="comment"># 矩形的左上角坐标</span></span><br><span class="line">        self.x1, self.y1 = <span class="keyword">None</span>, <span class="keyword">None</span> <span class="comment"># 矩形的右下角坐标</span></span><br><span class="line">        self.is_picking = <span class="keyword">False</span> <span class="comment"># 用户是否选中了矩形</span></span><br><span class="line">        self.sub_axes = list() <span class="comment"># 保存图像上所有的轴域</span></span><br><span class="line">        self.connect() <span class="comment"># 将事件与 handling 进行关联</span></span><br></pre></td></tr></table></figure><h3 id="鼠标按下事件"><a href="#鼠标按下事件" class="headerlink" title="鼠标按下事件:"></a>鼠标按下事件:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://matplotlib.org/users/event_handling.html" rel="external nofollow noopener noreferrer" target="_blank">Matplotlib User’s Guide: Interactive plots</a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;DetailViewer-简要介绍&quot;&gt;&lt;a href=&quot;#DetailViewer-简要介绍&quot; class=&quot;headerlink&quot; title=&quot;DetailViewer 简要介绍&quot;&gt;&lt;/a&gt;DetailViewer 简要介绍&lt;/h2&gt;&lt;p&gt;DetaiViewe
      
    
    </summary>
    
      <category term="程序语言" scheme="http://yoursite.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="http://yoursite.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/Python/"/>
    
      <category term="Matplotlib" scheme="http://yoursite.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/Python/Matplotlib/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Matplotlib" scheme="http://yoursite.com/tags/Matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu软件安装</title>
    <link href="http://yoursite.com/wiki/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/Unix/Ubuntu/Ubuntu%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/wiki/技术开发/Unix/Ubuntu/Ubuntu软件安装/</id>
    <published>2018-11-27T06:36:45.000Z</published>
    <updated>2019-01-11T02:57:48.803Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ubuntu-安装-gcc-4-9"><a href="#Ubuntu-安装-gcc-4-9" class="headerlink" title="Ubuntu 安装 gcc-4.9"></a>Ubuntu 安装 gcc-4.9</h2><p>参考: <a href="https://askubuntu.com/questions/428198/getting-installing-gcc-g-4-9-on-ubuntu" rel="external nofollow noopener noreferrer" target="_blank">Getting + installing gcc/g++ 4.9 on Ubuntu?</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo su -</span><br><span class="line">apt-get install build-essential</span><br><span class="line">add-apt-repository ppa:ubuntu-toolchain-r/<span class="built_in">test</span></span><br><span class="line">apt-get update</span><br><span class="line">apt-get install gcc-4.9 g++-4.9 cpp-4.9</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/bin</span><br><span class="line">rm gcc g++ cpp</span><br><span class="line">ln -s gcc-4.9 gcc</span><br><span class="line">ln -s g++-4.9 g++</span><br><span class="line">ln -s cpp-4.9 cpp</span><br></pre></td></tr></table></figure><p>除了使用软连接, 还可以使用 <code>update-alternatives</code> 来修改 <code>gcc</code> 默认的版本, 具体可以参考上面的参考资料.</p><h2 id="systemctl-command-not-found"><a href="#systemctl-command-not-found" class="headerlink" title="systemctl: command not found"></a>systemctl: command not found</h2><p>参考: <a href="https://askubuntu.com/questions/988266/systemctl-command-not-found-on-ubuntu-16-04" rel="external nofollow noopener noreferrer" target="_blank">systemctl: command not found on ubuntu 16.04</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install systemd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果软件损坏, 重装的方法</span></span><br><span class="line">sudo apt-get reinstall systemd</span><br></pre></td></tr></table></figure><h2 id="frpc-设置开机自启动"><a href="#frpc-设置开机自启动" class="headerlink" title="frpc 设置开机自启动"></a>frpc 设置开机自启动</h2><p>参考: <a href="https://github.com/fatedier/frp/issues/176" rel="external nofollow noopener noreferrer" target="_blank">Github: frp怎样开机启动和后台运行?</a></p><ol><li>在 <code>/etc/systemd/system/</code> 中添加 <code>frpc.service</code> 文件, 内容如下:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=frpc daemon</span><br><span class="line">After=syslog.target  network.target</span><br><span class="line">Wants=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/home/ieric/Programs/frp_0.20.0_linux_amd64/frpc -c /home/ieric/Programs/frp_0.20.0_linux_amd64/frpc.ini</span><br><span class="line">Restart= always</span><br><span class="line">RestartSec=1min</span><br><span class="line">ExecStop=/usr/bin/killall frpc</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>再修改一下 mode, <code>sudo chmod a+x frpc.service</code>.</p><ol start="2"><li><p>在 <code>frpc.ini</code> 配置文件中设置 <code>login_fail_exit</code> 的值为 <code>false</code> (默认是 <code>true</code>), 这样的话, 当启动时没有连上服务器就不会立即退出, 而是每隔 30s 自动重连.</p></li><li><p>完成以上两步之后, 使用</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> frpc</span><br><span class="line">sudo systemctl status frpc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是输出状态</span></span><br><span class="line">frpc.service - frpc daemon</span><br><span class="line">   Loaded: loaded (/etc/systemd/system/frpc.service; enabled)</span><br><span class="line">   Active: inactive ....</span><br></pre></td></tr></table></figure><h2 id="重启与关机"><a href="#重启与关机" class="headerlink" title="重启与关机"></a>重启与关机</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo reboot -nf</span><br><span class="line">sudo shutdown now</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Ubuntu-安装-gcc-4-9&quot;&gt;&lt;a href=&quot;#Ubuntu-安装-gcc-4-9&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu 安装 gcc-4.9&quot;&gt;&lt;/a&gt;Ubuntu 安装 gcc-4.9&lt;/h2&gt;&lt;p&gt;参考: &lt;a hre
      
    
    </summary>
    
      <category term="技术开发" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="Unix" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/Unix/"/>
    
      <category term="Ubuntu" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/Unix/Ubuntu/"/>
    
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>编程资源汇总</title>
    <link href="http://yoursite.com/wiki/%E7%BD%91%E7%BB%9C%E8%B5%84%E6%BA%90/%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/"/>
    <id>http://yoursite.com/wiki/网络资源/编程资源汇总/</id>
    <published>2018-11-26T15:25:18.000Z</published>
    <updated>2018-11-26T15:31:17.017Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编程资源总结"><a href="#编程资源总结" class="headerlink" title="编程资源总结"></a>编程资源总结</h2><ul><li><a href="https://github.com/justjavac/free-programming-books-zh_CN" rel="external nofollow noopener noreferrer" target="_blank">Github: 免费的编程中文书籍索引</a></li><li><a href="https://www.jianshu.com/p/e553b1d00501" rel="external nofollow noopener noreferrer" target="_blank">简书: 程序员书籍汇总下载</a></li><li><a href="https://github.com/china-testing/python-api-tesing" rel="external nofollow noopener noreferrer" target="_blank">Github: python中文库-python人工智能大数据自动化接口测试开发</a></li><li><a href="https://github.com/mbeyeler/opencv-machine-learning" rel="external nofollow noopener noreferrer" target="_blank">Github: Machine Learning for OpenCV</a></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;编程资源总结&quot;&gt;&lt;a href=&quot;#编程资源总结&quot; class=&quot;headerlink&quot; title=&quot;编程资源总结&quot;&gt;&lt;/a&gt;编程资源总结&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/justjavac/free-progr
      
    
    </summary>
    
      <category term="网络资源" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="Resource" scheme="http://yoursite.com/tags/Resource/"/>
    
  </entry>
  
  <entry>
    <title>vim技巧</title>
    <link href="http://yoursite.com/wiki/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/Unix/Vim/vim%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/wiki/技术开发/Unix/Vim/vim技巧/</id>
    <published>2018-11-26T15:11:51.000Z</published>
    <updated>2018-11-26T15:22:31.770Z</updated>
    
    <content type="html"><![CDATA[<h2 id="调整窗口的高度和宽度"><a href="#调整窗口的高度和宽度" class="headerlink" title="调整窗口的高度和宽度"></a>调整窗口的高度和宽度</h2><p>参考博客 1. 其中使用 <code>c-w, &gt;</code> 和 <code>c-w, &lt;</code> 最为方便.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">CTRL-W =        使得所有窗口 (几乎) 等宽、等高，但当前窗口使用 <span class="string">'winheight'</span> 和 <span class="string">'winwidth'</span>。</span><br><span class="line"></span><br><span class="line">:res[ize] -N                               </span><br><span class="line">CTRL-W -        使得当前窗口高度减 N (默认值是 1)。如果在 <span class="string">'vertical'</span> 之后使用，则使得宽度减 N。</span><br><span class="line"></span><br><span class="line">:res[ize] +N                                    </span><br><span class="line">CTRL-W +        使得当前窗口高度加 N (默认值是 1)。如果在 <span class="string">'vertical'</span> 之后使用，则使得宽度加 N。</span><br><span class="line"></span><br><span class="line">:res[ize] [N]</span><br><span class="line">CTRL-W CTRL-_                                  </span><br><span class="line">CTRL-W _        设置当前窗口的高度为 N (默认值为最大可能高度)。</span><br><span class="line"></span><br><span class="line">:vertical res[ize] [N]                  </span><br><span class="line">CTRL-W |        设置当前窗口的宽度为 N (默认值为最大可能宽度)。</span><br><span class="line"></span><br><span class="line">z&#123;nr&#125;&lt;CR&gt;       设置当前窗口的高度为 &#123;nr&#125;。</span><br><span class="line">                                           </span><br><span class="line">CTRL-W &lt;        使得当前窗口宽度减 N (默认值是 1)。                                              </span><br><span class="line">CTRL-W &gt;        使得当前窗口宽度加 N (默认值是 1)。</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://www.cnblogs.com/xuechao/archive/2011/03/29/1999292.html" rel="external nofollow noopener noreferrer" target="_blank">vim: vs sp 调整窗口高度和宽度</a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;调整窗口的高度和宽度&quot;&gt;&lt;a href=&quot;#调整窗口的高度和宽度&quot; class=&quot;headerlink&quot; title=&quot;调整窗口的高度和宽度&quot;&gt;&lt;/a&gt;调整窗口的高度和宽度&lt;/h2&gt;&lt;p&gt;参考博客 1. 其中使用 &lt;code&gt;c-w, &amp;gt;&lt;/code&gt; 和 
      
    
    </summary>
    
      <category term="技术开发" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="Unix" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/Unix/"/>
    
      <category term="Vim" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/Unix/Vim/"/>
    
    
      <category term="Unix" scheme="http://yoursite.com/tags/Unix/"/>
    
      <category term="Vim" scheme="http://yoursite.com/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>稀疏表示去噪</title>
    <link href="http://yoursite.com/wiki/%E4%B8%93%E4%B8%9A%E7%A0%94%E7%A9%B6/%E7%A8%80%E7%96%8F%E8%A1%A8%E7%A4%BA%E5%8E%BB%E5%99%AA/"/>
    <id>http://yoursite.com/wiki/专业研究/稀疏表示去噪/</id>
    <published>2018-11-26T14:00:14.000Z</published>
    <updated>2018-11-26T14:56:17.343Z</updated>
    
    <content type="html"><![CDATA[<h2 id="稀疏表示能去噪的原因"><a href="#稀疏表示能去噪的原因" class="headerlink" title="稀疏表示能去噪的原因"></a>稀疏表示能去噪的原因</h2><p>下面的论述来自参考博客一.</p><blockquote><p>可以认为含噪（观测）图像是由无噪（原始）图像和噪声合成的图像，而观测图像被认为是可稀疏的，即可以通过有限个原子来表示，而噪声是随机的不可稀疏的，即不可以通过有限个原子表示，因此通过观测图像去提取图像的系数成分，再用这些稀疏成分来重构图像，在这个过程中，噪声被处理为观测图像和重构图像之间的残差，在重构过程中残差被丢弃，从而达到去噪的效果。<br>稀疏表示又称为稀疏编码，这个过程可以被视为特征提取的过程，可以看作把目标信号投影到一组非正交的基构成的空间中，而在每个基上投影的系数，就是稀疏编码。这组非正交的基向量中，每一个基向量被称为一个原子，这些原子（列向量）可以构成一个超完备的字典。<br>那么，为什么要使用过完备的字典，或者说要在非正交的空间进行投影呢？<br>对于一组正交基而言，它们可以准确而唯一地表示空间中的任何向量，而且这些向量间没有冗余（因为正交），正式因为严格的正交限制，因此正交基的展开简单，但是稀疏性不够理想，因为严格正交的基往往只能表示图像的某一个特征而不能够同时表示其他特征，因此正交基的稀疏性不及非正交基(过完备字典).</p></blockquote><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://blog.csdn.net/tongdanping/article/details/79162547" rel="external nofollow noopener noreferrer" target="_blank">稀疏表示去噪的理解</a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;稀疏表示能去噪的原因&quot;&gt;&lt;a href=&quot;#稀疏表示能去噪的原因&quot; class=&quot;headerlink&quot; title=&quot;稀疏表示能去噪的原因&quot;&gt;&lt;/a&gt;稀疏表示能去噪的原因&lt;/h2&gt;&lt;p&gt;下面的论述来自参考博客一.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可以认为
      
    
    </summary>
    
      <category term="专业研究" scheme="http://yoursite.com/categories/%E4%B8%93%E4%B8%9A%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="专业研究" scheme="http://yoursite.com/tags/%E4%B8%93%E4%B8%9A%E7%A0%94%E7%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>Git多用户</title>
    <link href="http://yoursite.com/wiki/%E6%9F%90%E4%BA%9BTricks/Git%E5%A4%9A%E7%94%A8%E6%88%B7/"/>
    <id>http://yoursite.com/wiki/某些Tricks/Git多用户/</id>
    <published>2018-11-25T15:29:18.000Z</published>
    <updated>2018-11-26T13:54:59.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设置-SSH"><a href="#设置-SSH" class="headerlink" title="设置 SSH"></a>设置 SSH</h2><p>使用 <code>ssh-keygen</code> 产生新的秘钥, 然后将 <code>.pub</code> 放到 Github 上. 之后修改 <code>.ssh/config</code> 文件, 设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host xzml</span><br><span class="line">    HostName github.com</span><br><span class="line">    User git</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_xzml</span><br></pre></td></tr></table></figure><p>最后使用 <code>ssh -T xzml</code> 对 Github 进行访问, 如果成功的话, 会返回:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi xzml! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;设置-SSH&quot;&gt;&lt;a href=&quot;#设置-SSH&quot; class=&quot;headerlink&quot; title=&quot;设置 SSH&quot;&gt;&lt;/a&gt;设置 SSH&lt;/h2&gt;&lt;p&gt;使用 &lt;code&gt;ssh-keygen&lt;/code&gt; 产生新的秘钥, 然后将 &lt;code&gt;.pub&lt;/cod
      
    
    </summary>
    
      <category term="某些Tricks" scheme="http://yoursite.com/categories/%E6%9F%90%E4%BA%9BTricks/"/>
    
    
      <category term="Tricks" scheme="http://yoursite.com/tags/Tricks/"/>
    
  </entry>
  
  <entry>
    <title>Mac下使用Hexo+Github搭建个人博客</title>
    <link href="http://yoursite.com/wiki/%E6%9F%90%E4%BA%9BTricks/Mac%E4%B8%8B%E4%BD%BF%E7%94%A8Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/wiki/某些Tricks/Mac下使用Hexo-Github搭建个人博客/</id>
    <published>2018-11-25T14:58:43.000Z</published>
    <updated>2018-11-26T13:49:45.664Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>建议看看参考博客中的第一个, 图文并茂, 可以感受到很多细节, 作者非常用心, 第二个参考博客是更新奇的内容, 包括插入图片, 购买域名等.</p><h3 id="安装-Nodejs-和-npm"><a href="#安装-Nodejs-和-npm" class="headerlink" title="安装 Nodejs 和 npm"></a>安装 Nodejs 和 npm</h3><p>Hexo 是用 Nodejs 写成了, 所以需要先安装 Nodejs 和 npm, 推荐使用 Homebrew 安装. 安装完 Nodejs 后建议设置 <a href="http://npm.taobao.org/" rel="external nofollow noopener noreferrer" target="_blank">npm 淘宝镜像</a>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org --global</span><br><span class="line">npm config <span class="built_in">set</span> disturl https://npm.taobao.org/dist --global</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本号</span></span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本号</span></span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure><h3 id="本地调试"><a href="#本地调试" class="headerlink" title="本地调试"></a>本地调试</h3><p>创建某个目录用于存放你的博客, 比如我创建了 <code>PWiki/</code> 文件夹用于存放博客相关的文件, 然后执行如下命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hexo init <span class="comment"># 首先初始化 Hexo, 会将相关的文件从 Github 上下载下来, 默认使用 landscape 主题</span></span><br><span class="line">npm install <span class="comment"># 在部署博客之前需要安装依赖项, 我想这个命令会直接读取 PWiki/package.json 文件中的内容</span></span><br><span class="line">hexo generate <span class="comment"># 生成静态页面, Hexo 是一个博客框架, 只有执行了 generate 命令才能生成具体的 html, css 等文件</span></span><br><span class="line">hexo server <span class="comment"># 启动服务, 用于本地调试</span></span><br><span class="line">hexo clean <span class="comment"># 可以清除已经产生的静态页面, 如 PWiki/publish 目录</span></span><br><span class="line">hexo new <span class="comment"># 创建新博客</span></span><br></pre></td></tr></table></figure><ul><li>本地打开 <code>http://localhost:4000</code> 进行效果查看</li><li>命令缩写:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo generate <span class="comment"># 缩写 hexo g</span></span><br><span class="line">hexo server <span class="comment"># 缩写 hexo s</span></span><br><span class="line">hexo new <span class="comment"># 缩写 hexo n</span></span><br></pre></td></tr></table></figure><h2 id="部署到-Github"><a href="#部署到-Github" class="headerlink" title="部署到 Github"></a>部署到 Github</h2><ol><li>首先在 Github 上创建名为 <code>&lt;user&gt;.github.io</code> 的 repository, 我的 <code>&lt;user&gt;</code> 就是 <code>xzml</code>.</li><li>然后在 <code>PWiki/_config.yml</code> 文件的 <code>deploy</code> 项下, 增加如下内容:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: git@github.com:xzml/xzml.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><ol start="3"><li>安装 Github 部署器:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>否则应该会出现 <code>ERROR Deployer not found: git</code> 错误.</p><ol start="4"><li>将静态博客部署到 Github 上:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy <span class="comment"># 缩写 hexo d</span></span><br></pre></td></tr></table></figure><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>按照 <a href="https://github.com/zthxxx/hexo-theme-Wikitten" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/zthxxx/hexo-theme-Wikitten</a> 中的 <code>README.md</code> 操作就可以了.</p><p>大致思路就是:</p><ul><li>从 Github 上将主题下载到 <code>PWiki/</code> 下的 <code>themes</code> 目录下</li><li>修改 <code>PWiki/themes/Wikitten/_config.yml</code> 文件, 对主题进行配置</li><li>修改 <code>PWiki/_config.yml</code> 文件, 对项目进行配置, 比如将 <code>theme</code> 这一项更改为 <code>Wikitten</code>.</li></ul><p>另外需要注意的是 Wikitten 主题需要额外的一些插件, <code>README.md</code> 中写了, 为了安装它们, 我在 <code>PWiki/package.json</code> 直接增加了如下部分:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">"dependencies": &#123;</span><br><span class="line">    "hexo": "^3.7.0",</span><br><span class="line">    "hexo-autonofollow": "^1.0.1",</span><br><span class="line">    "hexo-deployer-git": "^0.3.1",</span><br><span class="line">    "hexo-directory-category": "^1.0.5",</span><br><span class="line">    "hexo-generator-archive": "^0.1.5",</span><br><span class="line">    "hexo-generator-category": "^0.1.3",</span><br><span class="line">    "hexo-generator-feed": "^1.2.2",</span><br><span class="line">    "hexo-generator-index": "^0.2.1",</span><br><span class="line">    "hexo-generator-json-content": "^3.0.1",</span><br><span class="line">    "hexo-generator-sitemap": "^1.2.0",</span><br><span class="line">    "hexo-generator-tag": "^0.2.0",</span><br><span class="line">    "hexo-renderer-ejs": "^0.3.1",</span><br><span class="line">    "hexo-renderer-marked": "^0.3.2",</span><br><span class="line">    "hexo-renderer-stylus": "^0.3.3",</span><br><span class="line">    "hexo-server": "^0.3.1"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再使用 <code>npm install</code> 命令安装即可. 还有要注意修改主题的 <code>_config.yml</code> 文件, 将原作者的个人信息改成自己的信息.</p><h2 id="保存博客到仓库"><a href="#保存博客到仓库" class="headerlink" title="保存博客到仓库"></a>保存博客到仓库</h2><p>我们自己使用 <code>hexo new &lt;title&gt;</code> 产生的博客源文件一般是放在 <code>PWiki/source/_posts/</code> 目录下, 使用 <code>hexo generate</code> 命令产生的静态页面一般是放在 <code>PWiki/publish/</code> 文件夹下. 为了对博客的 Markdown 源文件以及博客使用的主题进行备份, 参考 Wikitten 原作者的方法, 我在 Github 上创建了一个名为 <code>Wiki-site</code> 的仓库用于存储这些源文件.</p><p>具体方法是:</p><ul><li>在 Github 上创建一个名为 <code>Wiki-site</code> 的新仓库;</li><li>在本地上的 <code>PWiki/</code> 目录下使用 <code>git init</code> 命令;</li><li>修改 <code>PWiki/</code> 项目中的 <code>.gitignore</code> 文件, 过滤掉那些不需要追踪版本的文件; 另外要注意的问题是, 由于 <code>PWiki/themes/Wikitten</code> 是个 git submodule, 在 <code>PWiki/</code> 目录下直接使用 <code>git add *</code> 之类的命令可能会引起一些 Warning, 我的做法是到 <code>PWiki/themes/Wikitten/</code> 目录下先用 <code>git add/commit</code> 等命令处理好后, 再回到 <code>PWiki/</code> 目录使用 <code>git add/commit</code> 命令;</li><li>回到 <code>PWiki/</code> 目录, 将上面的修改都 <code>git add/commit</code>;</li><li>将本地项目与远程服务器进行关联, <code>git remote add origin git@github.com:xzml/Wiki-site.git</code> (具体可以参考第 5 个博客)</li><li>执行 <code>git pull origin master</code>, 将远程服务器中的 master 分支和本地的 origin 合并, 防止冲突.</li><li>上面没有报错之后, 可以使用 <code>git status</code> 查看当前本地仓库是不是干净的, 如果是的话, 就可以使用 <code>git push -u origin master</code> 推送到 Github 上了.</li><li>上面的步骤其实已经将问题给搞定了, 这里记录一个我出现的问题: 我有多个 Github 账号, 即使设置了 <code>PWiki/</code> 的 local user 为 xzml, 在使用 <code>git push -u origin master</code> 时, 仍会使用另一个 userb. 由于我访问 Github 使用的是 SSH, 这说明访问 <a href="mailto:`git@github.com" rel="external nofollow noopener noreferrer" target="_blank">`git@github.com</a><code>时使用的是 userb, 为了使通过 SSH 访问</code><a href="mailto:git@github.com" rel="external nofollow noopener noreferrer" target="_blank">git@github.com</a><code>使用 xzml, 我直接修改</code>PWiki/.git/config<code>文件中的</code>url = xzml:xzml/Wiki-site.git<code>, 这是因为我在</code>.ssh/config<code>给通过 xzml 访问</code><a href="mailto:git@github.com" rel="external nofollow noopener noreferrer" target="_blank">git@github.com</a><code>这一行为设置了别名为</code>xzml`.</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="http://lijiankun24.com/Mac%E4%B8%8BHexo%E5%92%8CGitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A21/" rel="external nofollow noopener noreferrer" target="_blank">Mac 下 Hexo 和 GitHub-Pages 搭建个人博客（一）</a></li><li><a href="http://lijiankun24.com/Mac%E4%B8%8BHexo%E5%92%8CGitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A22/" rel="external nofollow noopener noreferrer" target="_blank">Mac 下 Hexo 和 GitHub-Pages 搭建个人博客（二）</a></li><li><a href="https://www.jianshu.com/p/1519f22aff24" rel="external nofollow noopener noreferrer" target="_blank">macOS环境下利用Github和Hexo部署博客</a></li><li><a href="https://blog.zthxxx.me/posts/Hexo-Build-Static-Blog-Process/" rel="external nofollow noopener noreferrer" target="_blank">使用 Hexo 生成静态博客过程记录</a></li><li><a href="https://blog.csdn.net/CHENYUFENG1991/article/details/48930471" rel="external nofollow noopener noreferrer" target="_blank">使用Git命令把本地项目上传到Github托管</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;p&gt;建议看看参考博客中的第一个, 图文并茂, 可以感受到很多细节, 作者非常用心, 第二个参考博客是更新奇的内容, 包括插入图片
      
    
    </summary>
    
      <category term="某些Tricks" scheme="http://yoursite.com/categories/%E6%9F%90%E4%BA%9BTricks/"/>
    
    
      <category term="Tricks" scheme="http://yoursite.com/tags/Tricks/"/>
    
  </entry>
  
  <entry>
    <title>关于Wiki的主题</title>
    <link href="http://yoursite.com/wiki/%E6%9F%90%E4%BA%9BTricks/%E5%85%B3%E4%BA%8EWiki%E7%9A%84%E4%B8%BB%E9%A2%98/"/>
    <id>http://yoursite.com/wiki/某些Tricks/关于Wiki的主题/</id>
    <published>2018-11-25T14:35:41.000Z</published>
    <updated>2018-11-25T14:55:33.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="不可思议的-Tricks"><a href="#不可思议的-Tricks" class="headerlink" title="不可思议的 Tricks"></a>不可思议的 Tricks</h2><p>比如使用 Markdown 中的列表, 像如下代码是不会显示列表前面的点 $\bullet$:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">+ </span><span class="code">`a`</span> 是一个数组</span><br></pre></td></tr></table></figure><p>效果如下:</p><ul><li><code>a</code> 是一个数组</li></ul><p>需要写成:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">+ </span>参数 <span class="code">`a`</span> 是一个数组.</span><br></pre></td></tr></table></figure><p>才能得到想要的效果:</p><ul><li>参数 <code>a</code> 是一个数组.</li></ul><h2 id="修改-Wikitten-模板的属性"><a href="#修改-Wikitten-模板的属性" class="headerlink" title="修改 Wikitten 模板的属性"></a>修改 Wikitten 模板的属性</h2><h3 id="修改字体"><a href="#修改字体" class="headerlink" title="修改字体"></a>修改字体</h3><p>可以去 <code>themes/Wikitten/source/css</code> 目录下, 查看 <code>style.styl</code> 文件, 发现其中还会导入 <code>_variables.styl</code> 文件, 只需要修改该文件中的相关属性即可.</p><h3 id="修改代码使用的主题"><a href="#修改代码使用的主题" class="headerlink" title="修改代码使用的主题"></a>修改代码使用的主题</h3><p>当前我使用的代码主题 (配色) 是 <code>solarized-light</code>, 要查看其它的配色, 可以看 <code>themes/Wikitten/source/css/_highlight</code> 目录, 里面有大量的配色文件, 这些文件的文件名就是某种主题, 只需要将文件名填入 <code>themes/Wikitten/_config.yml</code> 中的 <code>highlight</code> 项目下即可. 比如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">highlight: solarized-dark <span class="comment"># monakai</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>参考资料中有 Wikitten 主题的地址, 以及原作者写的关于使用 Hexo 搭建个人 Wiki 的博客.</p><blockquote><ul><li><a href="https://www.v2ex.com/t/347176?p=2" rel="external nofollow noopener noreferrer" target="_blank">使用 Hexo 做个人 Wiki 知识管理系统</a></li><li><a href="https://wiki.zthxxx.me/" rel="external nofollow noopener noreferrer" target="_blank">作者的个人 Wiki 地址</a></li><li><a href="https://github.com/zthxxx/hexo-theme-Wikitten" rel="external nofollow noopener noreferrer" target="_blank">Wikitten 主题地址</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;不可思议的-Tricks&quot;&gt;&lt;a href=&quot;#不可思议的-Tricks&quot; class=&quot;headerlink&quot; title=&quot;不可思议的 Tricks&quot;&gt;&lt;/a&gt;不可思议的 Tricks&lt;/h2&gt;&lt;p&gt;比如使用 Markdown 中的列表, 像如下代码是不会显示
      
    
    </summary>
    
      <category term="某些Tricks" scheme="http://yoursite.com/categories/%E6%9F%90%E4%BA%9BTricks/"/>
    
    
      <category term="Tricks" scheme="http://yoursite.com/tags/Tricks/"/>
    
  </entry>
  
  <entry>
    <title>numpy中的random函数</title>
    <link href="http://yoursite.com/wiki/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/Python/Numpy/numpy%E4%B8%AD%E7%9A%84random%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/wiki/程序语言/Python/Numpy/numpy中的random函数/</id>
    <published>2018-11-25T11:41:45.000Z</published>
    <updated>2018-11-25T14:32:48.792Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Random-Data"><a href="#Random-Data" class="headerlink" title="Random Data"></a>Random Data</h2><h3 id="np-random-rand"><a href="#np-random-rand" class="headerlink" title="np.random.rand"></a>np.random.rand</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.rand(d0, d1, ..., dn)</span><br></pre></td></tr></table></figure><p>rand 函数根据给定的维度产生 $[0, 1)$ 之间的随机数, 服从均匀分布 (uniform distribution)</p><h3 id="np-random-randn"><a href="#np-random-randn" class="headerlink" title="np.random.randn"></a>np.random.randn</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.randn(d0, d1, ..., dn)</span><br></pre></td></tr></table></figure><p>randn 函数返回服从标准正态分布 ($\mathcal{N}(0, 1)$) 的随机数, 要返回服从 $\mathcal{N}(\mu, \sigma)$ 的样本, 使用 $\mu * \text{np.random.randn(…)} + \sigma$.</p><h3 id="np-random-randint"><a href="#np-random-randint" class="headerlink" title="np.random.randint"></a>np.random.randint</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.randint(low[, high, size, type])</span><br></pre></td></tr></table></figure><p>返回 $[low, high)$ 范围内的随机整数, 当 <code>high</code> 没有填写时, 默认产生 $[0, low)$ 范围内的随机整数. 默认类型为 <code>np.int</code>.</p><h3 id="np-random-random-integers"><a href="#np-random-random-integers" class="headerlink" title="np.random.random_integers"></a>np.random.random_integers</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.random_integers(low[, high, size])</span><br></pre></td></tr></table></figure><p>返回 $[low, high]$ 范围内的随机整数, 当 <code>high</code> 没有填写时, 默认生成随机数的范围为 $[1, low]$. 该函数在新版本的 numpy 中已被替代, 建议使用 <code>randint</code> 函数.</p><h3 id="生成-0-1-区间的浮点数"><a href="#生成-0-1-区间的浮点数" class="headerlink" title="生成 [0, 1) 区间的浮点数"></a>生成 [0, 1) 区间的浮点数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">np.random.random(size=<span class="keyword">None</span>)</span><br><span class="line">np.random.sample(size=<span class="keyword">None</span>)</span><br><span class="line">np.random.ranf(size=<span class="keyword">None</span>)</span><br><span class="line">np.random.random_sample(size=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><p>以上四个函数都是返回 $[0.0, 1.0)$ 范围内的随机浮点数. 如果要产生服从 $\text{Unif}(b, a), b &gt; a$ 分布的浮点数, 可以使用 $(b - a) * \text{random_sample()} + a$.</p><h3 id="np-random-choice"><a href="#np-random-choice" class="headerlink" title="np.random.choice"></a>np.random.choice</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.choice(a, size=<span class="keyword">None</span>, replace=<span class="keyword">True</span>, p=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><p>从给定的 <strong>一维</strong> 数组中随机选取一个样本</p><ul><li>参数 <code>a</code> 是整数时, 相当于 <code>np.arange(a)</code>.</li><li><code>size</code> 为返回数组的大小, 用 tuple 表示.</li><li>参数 <code>p</code> 表示数组中数据出现的概率, 数组之和应该为 1, 并且大小要和 <code>a</code> 一样大.</li><li><code>replace=False</code> 时, 生成的随机数不能有重复的数值, 这是一个测试</li></ul><p>例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.choice(<span class="number">5</span>, size=(<span class="number">3</span>,), replace=<span class="keyword">False</span>)</span><br><span class="line">array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.choice(<span class="number">5</span>, size=(<span class="number">6</span>,), replace=<span class="keyword">False</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"mtrand.pyx"</span>, line <span class="number">1166</span>, <span class="keyword">in</span> mtrand.RandomState.choice</span><br><span class="line">ValueError: Cannot take a larger sample than population when <span class="string">'replace=False'</span></span><br></pre></td></tr></table></figure><h2 id="Permutations"><a href="#Permutations" class="headerlink" title="Permutations"></a>Permutations</h2><h3 id="np-random-permutation"><a href="#np-random-permutation" class="headerlink" title="np.random.permutation"></a>np.random.permutation</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.permutation(x)</span><br></pre></td></tr></table></figure><p>对序列进行随机的非原地排列 (即不是 in-place 的, 会对序列进行拷贝). 如果序列是多维数组, 那么只会沿着第一个 index 进行随机排列.</p><ul><li>参数 <code>x</code> 如果是个整数, 那么相当于对 <code>np.arange(x)</code> 进行随机排列.</li><li>考虑多维数组的情况, 见下面的例子:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.permutation(a)</span><br><span class="line">array([[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">       [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]])</span><br></pre></td></tr></table></figure><h2 id="np-random-shuffle"><a href="#np-random-shuffle" class="headerlink" title="np.random.shuffle"></a>np.random.shuffle</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.shuffle()</span><br></pre></td></tr></table></figure><p>对数组/list 进行原地 shuffle. 注意这个函数直接修改数组, 返回 <code>None</code>. 对于多维数组, 只会沿着第一个 index 进行 shuffle.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">       [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.shuffle(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">       [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">       [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]])</span><br></pre></td></tr></table></figure><h2 id="Distributions"><a href="#Distributions" class="headerlink" title="Distributions"></a>Distributions</h2><h3 id="np-random-normal"><a href="#np-random-normal" class="headerlink" title="np.random.normal"></a>np.random.normal</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.normal(loc=<span class="number">0.0</span>, scale=<span class="number">1.0</span>, size=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><p>对正态 (高斯) 分布进行采样.</p><p>$$p ( x ) = \frac { 1 } { \sqrt { 2 \pi \sigma ^ { 2 } } } e ^ { - \frac { ( x - \mu ) ^ { 2 } } { 2 \sigma ^ { 2 } } }$$</p><p>其中 $\mu$ 称为 mean, 而 $\sigma$ 称为 standard deviation, $\sigma^2$ 被称为 variance.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>mu, sigma = <span class="number">0</span>, <span class="number">0.1</span> <span class="comment"># mean and standard deviation</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = np.random.normal(mu, sigma, <span class="number">1000</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>abs(mu - np.mean(s)) &lt; <span class="number">0.01</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>abs(sigma - np.std(s, ddof=<span class="number">1</span>)) &lt; <span class="number">0.01</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><h3 id="np-random-uniform"><a href="#np-random-uniform" class="headerlink" title="np.random.uniform"></a>np.random.uniform</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.uniform(low=<span class="number">0.0</span>, high=<span class="number">1.0</span>, size=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><p>对均匀分布进行采样. <code>low</code> 和 <code>size</code> 是可选的.</p><h2 id="Random-Generator"><a href="#Random-Generator" class="headerlink" title="Random Generator"></a>Random Generator</h2><h3 id="np-random-seed"><a href="#np-random-seed" class="headerlink" title="np.random.seed"></a>np.random.seed</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(seed=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><p>设置随机种子, 使结果可重复.</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://www.jianshu.com/p/214798dd8f93" rel="external nofollow noopener noreferrer" target="_blank">为什么你用不好Numpy的random函数?</a></li><li><a href="https://docs.scipy.org/doc/numpy-1.15.1/reference/routines.random.html" rel="external nofollow noopener noreferrer" target="_blank">Random sampling (numpy.random)</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Random-Data&quot;&gt;&lt;a href=&quot;#Random-Data&quot; class=&quot;headerlink&quot; title=&quot;Random Data&quot;&gt;&lt;/a&gt;Random Data&lt;/h2&gt;&lt;h3 id=&quot;np-random-rand&quot;&gt;&lt;a href=&quot;#np-
      
    
    </summary>
    
      <category term="程序语言" scheme="http://yoursite.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="http://yoursite.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/Python/"/>
    
      <category term="Numpy" scheme="http://yoursite.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/Python/Numpy/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Numpy" scheme="http://yoursite.com/tags/Numpy/"/>
    
  </entry>
  
</feed>
