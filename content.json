{"pages":[{"title":"Categories","date":"2018-11-25T02:31:40.665Z","path":"categories/index.html","text":""},{"title":"About","date":"2018-11-25T02:31:40.664Z","path":"about/index.html","text":""},{"title":"Tags","date":"2018-11-25T02:31:40.667Z","path":"tags/index.html","text":""}],"posts":[{"title":"关于Wiki的主题","date":"2018-11-25T14:35:41.000Z","path":"wiki/某些Tricks/关于Wiki的主题/","text":"不可思议的 Tricks比如使用 Markdown 中的列表, 像如下代码是不会显示列表前面的点 $\\bullet$: 1+ `a` 是一个数组 效果如下: a 是一个数组 需要写成: 1+ 参数 `a` 是一个数组. 才能得到想要的效果: 参数 a 是一个数组. 修改 Wikitten 模板的属性修改字体可以去 themes/Wikitten/source/css 目录下, 查看 style.styl 文件, 发现其中还会导入 _variables.styl 文件, 只需要修改该文件中的相关属性即可. 修改代码使用的主题当前我使用的代码主题 (配色) 是 solarized-light, 要查看其它的配色, 可以看 themes/Wikitten/source/css/_highlight 目录, 里面有大量的配色文件, 这些文件的文件名就是某种主题, 只需要将文件名填入 themes/Wikitten/_config.yml 中的 highlight 项目下即可. 比如: 1highlight: solarized-dark # monakai 参考资料参考资料中有 Wikitten 主题的地址, 以及原作者写的关于使用 Hexo 搭建个人 Wiki 的博客. 使用 Hexo 做个人 Wiki 知识管理系统 作者的个人 Wiki 地址 Wikitten 主题地址","tags":[{"name":"Tricks","slug":"Tricks","permalink":"http://yoursite.com/tags/Tricks/"}],"categories":[{"name":"某些Tricks","slug":"某些Tricks","permalink":"http://yoursite.com/categories/某些Tricks/"}]},{"title":"numpy中的random函数","date":"2018-11-25T11:41:45.000Z","path":"wiki/程序语言/Python/Numpy/numpy中的random函数/","text":"Random Datanp.random.rand1np.random.rand(d0, d1, ..., dn) rand 函数根据给定的维度产生 $[0, 1)$ 之间的随机数, 服从均匀分布 (uniform distribution) np.random.randn1np.random.randn(d0, d1, ..., dn) randn 函数返回服从标准正态分布 ($\\mathcal{N}(0, 1)$) 的随机数, 要返回服从 $\\mathcal{N}(\\mu, \\sigma)$ 的样本, 使用 $\\mu * \\text{np.random.randn(…)} + \\sigma$. np.random.randint1np.random.randint(low[, high, size, type]) 返回 $[low, high)$ 范围内的随机整数, 当 high 没有填写时, 默认产生 $[0, low)$ 范围内的随机整数. 默认类型为 np.int. np.random.random_integers1np.random.random_integers(low[, high, size]) 返回 $[low, high]$ 范围内的随机整数, 当 high 没有填写时, 默认生成随机数的范围为 $[1, low]$. 该函数在新版本的 numpy 中已被替代, 建议使用 randint 函数. 生成 [0, 1) 区间的浮点数1234np.random.random(size=None)np.random.sample(size=None)np.random.ranf(size=None)np.random.random_sample(size=None) 以上四个函数都是返回 $[0.0, 1.0)$ 范围内的随机浮点数. 如果要产生服从 $\\text{Unif}(b, a), b &gt; a$ 分布的浮点数, 可以使用 $(b - a) * \\text{random_sample()} + a$. np.random.choice1np.random.choice(a, size=None, replace=True, p=None) 从给定的 一维 数组中随机选取一个样本 参数 a 是整数时, 相当于 np.arange(a). size 为返回数组的大小, 用 tuple 表示. 参数 p 表示数组中数据出现的概率, 数组之和应该为 1, 并且大小要和 a 一样大. replace=False 时, 生成的随机数不能有重复的数值, 这是一个测试 例如: 12345678&gt;&gt;&gt; import numpy as np&gt;&gt;&gt; np.random.choice(5, size=(3,), replace=False)array([1, 2, 0])&gt;&gt;&gt; np.random.choice(5, size=(6,), replace=False)Traceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt; File \"mtrand.pyx\", line 1166, in mtrand.RandomState.choiceValueError: Cannot take a larger sample than population when 'replace=False' Permutationsnp.random.permutation1np.random.permutation(x) 对序列进行随机的非原地排列 (即不是 in-place 的, 会对序列进行拷贝). 如果序列是多维数组, 那么只会沿着第一个 index 进行随机排列. 参数 x 如果是个整数, 那么相当于对 np.arange(x) 进行随机排列. 考虑多维数组的情况, 见下面的例子: 12345&gt;&gt;&gt; a = np.arange(9).reshape(3, 3)&gt;&gt;&gt; np.random.permutation(a)array([[3, 4, 5], [0, 1, 2], [6, 7, 8]]) np.random.shuffle1np.random.shuffle() 对数组/list 进行原地 shuffle. 注意这个函数直接修改数组, 返回 None. 对于多维数组, 只会沿着第一个 index 进行 shuffle. 123456789&gt;&gt;&gt; aarray([[0, 1, 2], [3, 4, 5], [6, 7, 8]])&gt;&gt;&gt; np.random.shuffle(a)&gt;&gt;&gt; aarray([[3, 4, 5], [6, 7, 8], [0, 1, 2]]) Distributionsnp.random.normal1np.random.normal(loc=0.0, scale=1.0, size=None) 对正态 (高斯) 分布进行采样. $$p ( x ) = \\frac { 1 } { \\sqrt { 2 \\pi \\sigma ^ { 2 } } } e ^ { - \\frac { ( x - \\mu ) ^ { 2 } } { 2 \\sigma ^ { 2 } } }$$ 其中 $\\mu$ 称为 mean, 而 $\\sigma$ 称为 standard deviation, $\\sigma^2$ 被称为 variance. 123456&gt;&gt;&gt; mu, sigma = 0, 0.1 # mean and standard deviation&gt;&gt;&gt; s = np.random.normal(mu, sigma, 1000)&gt;&gt;&gt; abs(mu - np.mean(s)) &lt; 0.01True&gt;&gt;&gt; abs(sigma - np.std(s, ddof=1)) &lt; 0.01True np.random.uniform1np.random.uniform(low=0.0, high=1.0, size=None) 对均匀分布进行采样. low 和 size 是可选的. Random Generatornp.random.seed1np.random.seed(seed=None) 设置随机种子, 使结果可重复. 参考资料 为什么你用不好Numpy的random函数? Random sampling (numpy.random)","tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"Numpy","slug":"Numpy","permalink":"http://yoursite.com/tags/Numpy/"}],"categories":[{"name":"程序语言","slug":"程序语言","permalink":"http://yoursite.com/categories/程序语言/"},{"name":"Python","slug":"程序语言/Python","permalink":"http://yoursite.com/categories/程序语言/Python/"},{"name":"Numpy","slug":"程序语言/Python/Numpy","permalink":"http://yoursite.com/categories/程序语言/Python/Numpy/"}]}]}